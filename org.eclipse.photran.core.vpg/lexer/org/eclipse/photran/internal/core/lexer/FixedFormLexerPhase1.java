/* The following code was generated by JFlex 1.4.3 on 6/11/14 2:02 PM */

/*******************************************************************************
 * Copyright (c) 2009 University of Illinois at Urbana-Champaign and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     UIUC - Initial API and implementation
 *     Rocky Dunlap - University of Colorado
 *******************************************************************************/

/*
 * First phase of fixed form lexical analysis for Fortran 95 parser
 *
 * FixedFormLexerPhase1 acts as a "token stream" feeding FreeFormLexerPhase2
 * and is feeded by FixedFormLexerPrepass
 * (See FixedFormLexerPrepass and FixedFormLexerPhase2.java and f95t.bnf)
 *
 * @author Jeffrey Overbey and Dirk Rossow
 *
 * @see FixedFormLexerPrepass
 * @see FixedFormLexerPhase2
 * @see Parser
 *
 * NOTE: Get rid of (space out) "yybegin(YYSTANDARD);" in the lines
 * for any tokens that can appear in an IMPLICIT statement
 * (It was also omitted in the lines for T_SLASH so that
 * INTERFACE OPERATOR (/) would tokenize correctly.)
 *
 * Changes:
 * 29.06.2005 Jeff Overbey: Added Fortran INCLUDE and CPP directives
 */

package org.eclipse.photran.internal.core.lexer;

import java.util.regex.Pattern;
import java.io.Reader;
import org.eclipse.core.resources.IFile;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/11/14 2:02 PM from the specification file
 * <tt>FixedFormLexerPhase1.flex</tt>
 */
public class FixedFormLexerPhase1 implements ILexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int OPERATORorFORMAT = 14;
  public static final int IDENT = 16;
  public static final int IMPLICIT = 2;
  public static final int QUOTED = 4;
  public static final int HOLLERITH = 8;
  public static final int YYSTANDARD = 10;
  public static final int YYSTANDARD_NOHOLLERITH = 12;
  public static final int YYINITIAL = 0;
  public static final int DBLQUOTED = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\46\1\2\2\44\1\1\22\0\1\46\1\44\1\16\1\45"+
    "\1\32\1\66\1\0\1\14\1\40\1\42\1\3\1\6\1\41\1\7"+
    "\1\11\1\67\2\15\6\20\2\4\1\35\1\43\1\65\1\55\1\56"+
    "\1\0\1\34\1\22\1\13\1\50\1\10\1\5\1\25\1\27\1\23"+
    "\1\24\1\12\1\61\1\47\1\53\1\37\1\17\1\30\1\64\1\52"+
    "\1\26\1\36\1\51\1\54\1\57\1\31\1\60\1\21\1\62\1\0"+
    "\1\63\1\0\1\33\1\0\1\22\1\13\1\50\1\10\1\5\1\25"+
    "\1\27\1\23\1\24\1\12\1\61\1\47\1\53\1\37\1\17\1\30"+
    "\1\64\1\52\1\26\1\36\1\51\1\54\1\57\1\31\1\60\1\21"+
    "\12\0\1\44\u1fa2\0\2\44\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\3\1\1\7\1\10\10\1\1\11\1\12\2\1\1\13"+
    "\1\14\1\15\7\1\1\16\1\17\2\1\1\20\1\21"+
    "\1\22\1\23\1\24\1\4\1\1\1\5\1\6\10\1"+
    "\1\13\1\24\1\25\1\26\1\27\1\25\1\30\1\31"+
    "\1\32\1\13\1\4\1\33\1\34\1\33\1\35\7\0"+
    "\1\36\36\0\1\37\1\40\1\41\14\0\1\42\5\0"+
    "\1\43\37\0\1\44\1\45\1\46\4\0\1\47\1\50"+
    "\1\51\1\52\3\0\1\53\1\54\1\55\5\0\1\56"+
    "\1\0\1\57\1\60\1\61\1\62\4\0\1\63\17\0"+
    "\1\64\26\0\1\65\6\0\1\66\75\0\1\67\14\0"+
    "\1\70\22\0\1\56\1\0\1\71\1\0\1\72\11\0"+
    "\1\73\16\0\1\74\1\0\1\75\10\0\1\76\2\0"+
    "\1\77\1\0\1\100\2\0\1\101\1\102\1\0\1\103"+
    "\2\0\1\104\1\105\1\106\1\0\1\107\2\0\1\110"+
    "\1\111\2\0\1\112\1\113\11\0\1\114\17\0\1\115"+
    "\4\0\1\116\2\0\1\117\4\0\1\120\1\0\1\121"+
    "\6\0\1\122\3\0\1\123\7\0\1\124\1\125\3\0"+
    "\1\126\2\0\1\127\6\0\2\130\5\0\1\131\6\0"+
    "\1\132\1\133\10\0\1\134\1\135\13\0\1\136\3\0"+
    "\1\137\1\56\2\140\1\0\2\141\1\0\1\4\3\0"+
    "\1\142\1\0\1\143\12\0\1\144\1\0\1\145\5\0"+
    "\1\146\11\0\1\147\1\150\3\0\1\151\1\0\1\152"+
    "\20\0\1\153\15\0\1\154\2\0\1\155\20\0\1\156"+
    "\1\157\1\160\6\0\1\161\14\0\1\162\3\0\1\163"+
    "\11\0\1\164\1\165\1\0\1\166\12\0\1\167\5\0"+
    "\1\170\1\171\1\172\1\173\1\0\1\174\23\0\1\175"+
    "\7\0\1\176\3\0\1\177\1\200\11\0\1\201\11\0"+
    "\1\202\4\0\1\203\1\204\1\0\1\205\1\206\1\207"+
    "\1\210\1\211\1\0\1\212\1\0\1\213\1\214\1\0"+
    "\1\215\13\0\1\216\5\0\1\217\2\0\1\220\4\0"+
    "\1\221\14\0\1\222\2\0\1\223\1\0\1\224\1\225"+
    "\1\0\1\135\1\226\1\227\1\230\1\0\1\231\1\0"+
    "\1\232\1\233\2\0\1\234\1\0\1\235\1\236\4\0"+
    "\1\237\6\0\1\240\12\0\1\241\1\242\6\0\1\243"+
    "\2\0\1\244\11\0\1\245\4\0\1\246\1\247\3\0"+
    "\1\250\12\0\1\251\2\0\1\252\1\0\1\253\3\0"+
    "\1\254\2\0\1\255\4\0\1\256\1\0\1\257\1\0"+
    "\1\260\6\0\1\261\5\0\1\262\1\0\1\263\1\0"+
    "\1\264\1\265\12\0\1\266\6\0\1\267\1\0\1\176"+
    "\2\0\1\270\3\0\1\271\1\272\1\273\1\0\1\274"+
    "\3\0\1\275\1\0\1\276\1\277\1\300\5\0\1\301"+
    "\1\0\1\302\2\0\1\303\1\304\1\305\16\0\1\306"+
    "\1\307\2\0\1\310\1\0\1\311\4\0\1\312\3\0"+
    "\1\313\3\0\1\314\1\0\1\315\5\0\1\316\2\0"+
    "\1\317\1\320\2\0\1\321\2\0\1\322\1\323\1\324"+
    "\1\325\1\326\4\0\1\247\1\327\1\330\5\0\1\331"+
    "\2\0\1\332\1\0\1\333\1\334\1\335\1\336\1\337"+
    "\1\340\2\0\1\260\3\0\1\341\1\261\1\342\2\0"+
    "\1\343\6\0\1\344\2\0\1\345\1\346\1\0\1\347"+
    "\2\0\1\350\2\0\1\351\1\0\1\352\1\0\1\353"+
    "\1\354\1\355\1\356\3\0\1\357\1\360\3\0\1\34"+
    "\2\0\1\361\3\0\1\362\1\363\3\0\1\364\1\365"+
    "\3\0\1\366\1\342\1\0\1\367\1\370\1\371\1\0"+
    "\1\372\1\373\2\0\1\374\1\375\3\0\1\376\1\0"+
    "\1\377\3\0\1\u0100\1\u0101\2\0\1\u0102\1\0\1\u0103"+
    "\1\377\1\u0104\1\0\1\u0103";

  private static int [] zzUnpackAction() {
    int [] result = new int[1152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u01f8\0\u0268\0\u02a0\0\u02d8\0\u01f8"+
    "\0\u01f8\0\u0310\0\u0348\0\u0380\0\u01f8\0\u01f8\0\u03b8\0\u03f0"+
    "\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540\0\u01f8\0\u01f8"+
    "\0\u0578\0\u05b0\0\u01f8\0\u01f8\0\u01f8\0\u05e8\0\u0620\0\u0658"+
    "\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818"+
    "\0\u01f8\0\u01f8\0\u0850\0\u01f8\0\u0888\0\u08c0\0\u08f8\0\u0930"+
    "\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8"+
    "\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u01f8\0\u0bd0\0\u0c08\0\u0c40"+
    "\0\u01f8\0\u01f8\0\u0c78\0\u0cb0\0\u01f8\0\u0ce8\0\u0d20\0\u01f8"+
    "\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0"+
    "\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0"+
    "\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260"+
    "\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420"+
    "\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u01f8\0\u01f8"+
    "\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730"+
    "\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0"+
    "\0\u1928\0\u1960\0\u1998\0\u01f8\0\u19d0\0\u1a08\0\u1a40\0\u1a78"+
    "\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38"+
    "\0\u05e8\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0"+
    "\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80"+
    "\0\u1fb8\0\u1ff0\0\u2028\0\u01f8\0\u01f8\0\u01f8\0\u2060\0\u2098"+
    "\0\u20d0\0\u2108\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u2140\0\u2178"+
    "\0\u21b0\0\u01f8\0\u01f8\0\u01f8\0\u21e8\0\u2220\0\u2258\0\u2290"+
    "\0\u22c8\0\u2300\0\u2338\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u2370"+
    "\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530"+
    "\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0"+
    "\0\u2728\0\u2760\0\u2798\0\u01f8\0\u27d0\0\u2808\0\u2840\0\u2878"+
    "\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38"+
    "\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8"+
    "\0\u2c30\0\u2c68\0\u01f8\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80"+
    "\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40"+
    "\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100"+
    "\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288\0\u32c0"+
    "\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480"+
    "\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640"+
    "\0\u3678\0\u36b0\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800"+
    "\0\u3838\0\u3870\0\u38a8\0\u38e0\0\u3918\0\u3950\0\u3988\0\u39c0"+
    "\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48\0\u3b80"+
    "\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60\0\u3c98\0\u3cd0\0\u3d08\0\u3d40"+
    "\0\u3d78\0\u3db0\0\u3de8\0\u3e20\0\u01f8\0\u3e58\0\u3e90\0\u3ec8"+
    "\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0\0\u4018\0\u4050\0\u4088"+
    "\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u41a0\0\u41d8\0\u4210\0\u4248"+
    "\0\u4280\0\u42b8\0\u42b8\0\u01f8\0\u42f0\0\u4328\0\u4360\0\u4398"+
    "\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0\0\u01f8\0\u44e8\0\u4520"+
    "\0\u4558\0\u4590\0\u45c8\0\u4600\0\u4638\0\u4670\0\u46a8\0\u46e0"+
    "\0\u4718\0\u4750\0\u4788\0\u47c0\0\u47f8\0\u4830\0\u4868\0\u48a0"+
    "\0\u48d8\0\u4910\0\u4948\0\u4980\0\u49b8\0\u49f0\0\u4a28\0\u01f8"+
    "\0\u4a60\0\u4a98\0\u01f8\0\u4ad0\0\u01f8\0\u4b08\0\u4b40\0\u01f8"+
    "\0\u01f8\0\u4b78\0\u01f8\0\u4bb0\0\u4be8\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u4c20\0\u01f8\0\u4c58\0\u4c90\0\u01f8\0\u4cc8\0\u4d00\0\u4d38"+
    "\0\u01f8\0\u01f8\0\u4d70\0\u4da8\0\u4de0\0\u4e18\0\u4e50\0\u4e88"+
    "\0\u4ec0\0\u4ef8\0\u4f30\0\u01f8\0\u4f68\0\u4fa0\0\u4fd8\0\u5010"+
    "\0\u5048\0\u5080\0\u50b8\0\u50f0\0\u5128\0\u5160\0\u5198\0\u51d0"+
    "\0\u5208\0\u5240\0\u5278\0\u52b0\0\u52e8\0\u5320\0\u5358\0\u5390"+
    "\0\u01f8\0\u53c8\0\u5400\0\u01f8\0\u5438\0\u5470\0\u54a8\0\u54e0"+
    "\0\u5518\0\u5550\0\u01f8\0\u5588\0\u55c0\0\u55f8\0\u5630\0\u5668"+
    "\0\u56a0\0\u01f8\0\u56d8\0\u5710\0\u5748\0\u01f8\0\u5780\0\u57b8"+
    "\0\u57f0\0\u5828\0\u5860\0\u5898\0\u58d0\0\u01f8\0\u01f8\0\u5908"+
    "\0\u5940\0\u5978\0\u01f8\0\u59b0\0\u59e8\0\u5a20\0\u5a58\0\u5a90"+
    "\0\u5ac8\0\u5b00\0\u5b38\0\u5b70\0\u5ba8\0\u01f8\0\u5be0\0\u5c18"+
    "\0\u5c50\0\u5c88\0\u5cc0\0\u01f8\0\u5cf8\0\u5d30\0\u5d68\0\u5da0"+
    "\0\u5dd8\0\u5e10\0\u01f8\0\u01f8\0\u5e48\0\u5e80\0\u5eb8\0\u5ef0"+
    "\0\u5f28\0\u5f60\0\u5f98\0\u5fd0\0\u6008\0\u6040\0\u6078\0\u60b0"+
    "\0\u60e8\0\u6120\0\u6158\0\u6190\0\u61c8\0\u6200\0\u6238\0\u6270"+
    "\0\u62a8\0\u01f8\0\u62e0\0\u6318\0\u6350\0\u6388\0\u4280\0\u63c0"+
    "\0\u4360\0\u63f8\0\u6430\0\u01f8\0\u6468\0\u4478\0\u64a0\0\u64d8"+
    "\0\u6510\0\u01f8\0\u6548\0\u01f8\0\u6580\0\u65b8\0\u65f0\0\u6628"+
    "\0\u6660\0\u6698\0\u66d0\0\u6708\0\u6740\0\u6778\0\u01f8\0\u67b0"+
    "\0\u01f8\0\u67e8\0\u6820\0\u6858\0\u6890\0\u68c8\0\u01f8\0\u6900"+
    "\0\u6938\0\u6970\0\u69a8\0\u69e0\0\u6a18\0\u6a50\0\u6a88\0\u6ac0"+
    "\0\u01f8\0\u01f8\0\u6af8\0\u6b30\0\u6b68\0\u01f8\0\u6ba0\0\u6bd8"+
    "\0\u6c10\0\u6c48\0\u6c80\0\u6cb8\0\u6cf0\0\u6d28\0\u6d60\0\u6d98"+
    "\0\u6dd0\0\u6e08\0\u6e40\0\u6e78\0\u6eb0\0\u6ee8\0\u6f20\0\u6f58"+
    "\0\u01f8\0\u6f90\0\u6fc8\0\u7000\0\u7038\0\u7070\0\u70a8\0\u70e0"+
    "\0\u7118\0\u7150\0\u7188\0\u71c0\0\u71f8\0\u7230\0\u01f8\0\u7268"+
    "\0\u72a0\0\u01f8\0\u72d8\0\u7310\0\u7348\0\u7380\0\u73b8\0\u73f0"+
    "\0\u7428\0\u7460\0\u7498\0\u74d0\0\u7508\0\u7540\0\u7578\0\u75b0"+
    "\0\u75e8\0\u7620\0\u01f8\0\u01f8\0\u01f8\0\u7658\0\u7690\0\u76c8"+
    "\0\u7700\0\u7738\0\u7770\0\u01f8\0\u77a8\0\u77e0\0\u7818\0\u7850"+
    "\0\u7888\0\u78c0\0\u78f8\0\u7930\0\u7968\0\u79a0\0\u79d8\0\u7a10"+
    "\0\u01f8\0\u7a48\0\u7a80\0\u7ab8\0\u01f8\0\u7af0\0\u7b28\0\u7b60"+
    "\0\u7b98\0\u7bd0\0\u7c08\0\u7c40\0\u7c78\0\u7cb0\0\u01f8\0\u01f8"+
    "\0\u7ce8\0\u01f8\0\u7d20\0\u7d58\0\u7d90\0\u7dc8\0\u7e00\0\u7e38"+
    "\0\u7e70\0\u7ea8\0\u7ee0\0\u7f18\0\u01f8\0\u7f50\0\u7f88\0\u7fc0"+
    "\0\u7ff8\0\u8030\0\u01f8\0\u01f8\0\u01f8\0\u8068\0\u80a0\0\u01f8"+
    "\0\u80d8\0\u8110\0\u8148\0\u8180\0\u81b8\0\u81f0\0\u8228\0\u8260"+
    "\0\u8298\0\u82d0\0\u8308\0\u8340\0\u8378\0\u83b0\0\u83e8\0\u8420"+
    "\0\u8458\0\u8490\0\u84c8\0\u01f8\0\u8500\0\u8538\0\u8570\0\u85a8"+
    "\0\u85e0\0\u8618\0\u8650\0\u8688\0\u86c0\0\u86f8\0\u8730\0\u01f8"+
    "\0\u01f8\0\u8768\0\u87a0\0\u87d8\0\u8810\0\u8848\0\u8880\0\u88b8"+
    "\0\u88f0\0\u8928\0\u8960\0\u8998\0\u89d0\0\u8a08\0\u8a40\0\u8a78"+
    "\0\u8ab0\0\u8ae8\0\u8b20\0\u8b58\0\u01f8\0\u8b90\0\u8bc8\0\u8c00"+
    "\0\u8c38\0\u01f8\0\u01f8\0\u8c70\0\u01f8\0\u01f8\0\u8ca8\0\u01f8"+
    "\0\u01f8\0\u8ce0\0\u8d18\0\u8d50\0\u01f8\0\u01f8\0\u8d88\0\u01f8"+
    "\0\u8dc0\0\u8df8\0\u8e30\0\u8e68\0\u8ea0\0\u8ed8\0\u8f10\0\u8f48"+
    "\0\u8f80\0\u8fb8\0\u8ff0\0\u01f8\0\u9028\0\u9060\0\u9098\0\u90d0"+
    "\0\u9108\0\u01f8\0\u9140\0\u9178\0\u01f8\0\u91b0\0\u91e8\0\u9220"+
    "\0\u9258\0\u01f8\0\u9290\0\u92c8\0\u9300\0\u9338\0\u9370\0\u93a8"+
    "\0\u93e0\0\u9418\0\u9450\0\u9488\0\u94c0\0\u94f8\0\u01f8\0\u9530"+
    "\0\u9568\0\u01f8\0\u95a0\0\u01f8\0\u01f8\0\u95d8\0\u7e38\0\u01f8"+
    "\0\u01f8\0\u01f8\0\u9610\0\u01f8\0\u9648\0\u01f8\0\u01f8\0\u9680"+
    "\0\u96b8\0\u01f8\0\u96f0\0\u01f8\0\u01f8\0\u9728\0\u9760\0\u9798"+
    "\0\u97d0\0\u01f8\0\u9808\0\u9840\0\u9878\0\u98b0\0\u98e8\0\u9920"+
    "\0\u01f8\0\u9958\0\u9990\0\u99c8\0\u9a00\0\u9a38\0\u9a70\0\u9aa8"+
    "\0\u9ae0\0\u9b18\0\u9b50\0\u01f8\0\u01f8\0\u9b88\0\u9bc0\0\u9bf8"+
    "\0\u9c30\0\u9c68\0\u9ca0\0\u01f8\0\u9cd8\0\u9d10\0\u01f8\0\u9d48"+
    "\0\u9d80\0\u9db8\0\u9df0\0\u9e28\0\u9e60\0\u9e98\0\u9ed0\0\u9f08"+
    "\0\u01f8\0\u9f40\0\u9f78\0\u9fb0\0\u9fe8\0\u01f8\0\ua020\0\ua058"+
    "\0\ua090\0\ua0c8\0\u01f8\0\ua100\0\ua138\0\ua170\0\ua1a8\0\ua1e0"+
    "\0\ua218\0\ua250\0\ua288\0\ua2c0\0\ua2f8\0\u01f8\0\ua330\0\ua368"+
    "\0\u01f8\0\ua3a0\0\u01f8\0\ua3d8\0\ua410\0\ua448\0\u01f8\0\ua480"+
    "\0\ua4b8\0\u01f8\0\ua4f0\0\ua528\0\ua560\0\ua598\0\u01f8\0\ua5d0"+
    "\0\u01f8\0\ua608\0\ua640\0\ua678\0\ua6b0\0\ua6e8\0\ua720\0\ua758"+
    "\0\ua790\0\ua7c8\0\ua800\0\ua838\0\ua870\0\ua8a8\0\ua8e0\0\u01f8"+
    "\0\ua918\0\u01f8\0\ua950\0\u01f8\0\ua988\0\ua9c0\0\ua9f8\0\uaa30"+
    "\0\uaa68\0\uaaa0\0\uaad8\0\uab10\0\uab48\0\uab80\0\uabb8\0\u01f8"+
    "\0\uabf0\0\uac28\0\uac60\0\uac98\0\uacd0\0\uad08\0\u01f8\0\uad40"+
    "\0\u9bc0\0\uad78\0\uadb0\0\u01f8\0\uade8\0\uae20\0\uae58\0\u01f8"+
    "\0\u01f8\0\u01f8\0\uae90\0\u01f8\0\uaec8\0\uaf00\0\uaf38\0\u01f8"+
    "\0\uaf70\0\u01f8\0\u01f8\0\u01f8\0\uafa8\0\uafe0\0\ub018\0\ub050"+
    "\0\ub088\0\u01f8\0\ub0c0\0\u01f8\0\ub0f8\0\ub130\0\u01f8\0\u01f8"+
    "\0\u01f8\0\ub168\0\ub1a0\0\ub1d8\0\ub210\0\ub248\0\ub280\0\ub2b8"+
    "\0\ub2f0\0\ub328\0\ub360\0\ub398\0\ub3d0\0\ub408\0\ub440\0\u01f8"+
    "\0\u01f8\0\ub478\0\ub4b0\0\u01f8\0\ub4e8\0\u01f8\0\ub520\0\ub558"+
    "\0\ub590\0\ub5c8\0\u01f8\0\ub600\0\ub638\0\ub670\0\u01f8\0\ub6a8"+
    "\0\ub6e0\0\ub718\0\u01f8\0\ub750\0\u01f8\0\ub788\0\ub7c0\0\ub7f8"+
    "\0\ub830\0\ub868\0\u01f8\0\ub8a0\0\ub8d8\0\u01f8\0\u01f8\0\ub910"+
    "\0\ub948\0\u01f8\0\ub980\0\ub9b8\0\u01f8\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u01f8\0\ub9f0\0\uba28\0\uba60\0\uba98\0\uafe0\0\u01f8\0\u01f8"+
    "\0\ubad0\0\ubb08\0\ubb40\0\ubb78\0\ubbb0\0\u01f8\0\ubbe8\0\ubc20"+
    "\0\u01f8\0\ubc58\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8"+
    "\0\ubc90\0\ubcc8\0\ub478\0\ubd00\0\ubd38\0\ubd70\0\u01f8\0\ub590"+
    "\0\ubda8\0\ubde0\0\ube18\0\u01f8\0\ube50\0\ube88\0\ubec0\0\ubef8"+
    "\0\ubf30\0\ubf68\0\u01f8\0\ubfa0\0\ubfd8\0\u01f8\0\u01f8\0\uc010"+
    "\0\u01f8\0\uc048\0\uc080\0\u01f8\0\uc0b8\0\uc0f0\0\u01f8\0\uc128"+
    "\0\u01f8\0\uc160\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\uc198\0\uc1d0"+
    "\0\uc208\0\u01f8\0\u01f8\0\uc240\0\uc278\0\uc2b0\0\u01f8\0\uc2e8"+
    "\0\uc320\0\u01f8\0\uc358\0\uc390\0\uc3c8\0\u01f8\0\u01f8\0\uc400"+
    "\0\uc438\0\uc470\0\u01f8\0\u01f8\0\uc4a8\0\uc4e0\0\uc518\0\u01f8"+
    "\0\uc240\0\uc550\0\u01f8\0\u01f8\0\u01f8\0\uc588\0\u01f8\0\u01f8"+
    "\0\uc5c0\0\uc5f8\0\uc630\0\u01f8\0\uc668\0\uc6a0\0\uc6d8\0\u01f8"+
    "\0\uc710\0\uc748\0\uc630\0\uc780\0\uc7b8\0\u01f8\0\u01f8\0\uc7f0"+
    "\0\uc828\0\u01f8\0\uc860\0\uc898\0\uc828\0\u01f8\0\uc8d0\0\uc8d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\12\1\24\1\25\1\16\1\26\1\27"+
    "\1\16\1\30\1\31\1\12\1\32\1\33\1\34\1\35"+
    "\1\36\2\12\1\37\1\12\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\14\1\12\1\46\1\12\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\12"+
    "\1\60\1\61\1\62\1\12\1\63\1\64\1\65\1\12"+
    "\1\13\1\14\1\15\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\12\1\74\1\25\1\66\1\26\1\75\1\66"+
    "\1\76\1\31\1\12\1\77\1\100\1\34\1\101\1\36"+
    "\2\12\1\37\1\12\1\40\1\41\1\42\1\102\1\44"+
    "\1\45\1\14\1\12\1\46\1\12\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\12\1\60"+
    "\1\61\1\62\1\12\1\63\1\64\1\103\1\104\2\105"+
    "\11\104\1\106\53\104\1\107\2\105\13\107\1\110\51\107"+
    "\1\111\2\112\65\111\1\12\1\13\1\14\1\15\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\12\1\74\1\25"+
    "\1\66\1\26\1\75\1\66\1\76\1\31\1\12\1\77"+
    "\1\100\1\34\1\101\1\36\2\12\1\37\1\12\1\40"+
    "\1\41\1\42\1\113\1\44\1\45\1\14\1\12\1\46"+
    "\1\12\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\12\1\60\1\61\1\62\1\12\1\63"+
    "\1\64\1\103\1\12\1\13\1\14\1\15\1\114\1\67"+
    "\1\20\1\21\1\72\1\73\1\12\1\74\1\25\1\114"+
    "\1\26\1\75\1\114\1\76\1\31\1\12\1\77\1\100"+
    "\1\34\1\101\1\36\2\12\1\37\1\12\1\40\1\41"+
    "\1\42\1\113\1\44\1\45\1\14\1\12\1\46\1\12"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\12\1\60\1\61\1\62\1\12\1\63\1\64"+
    "\1\103\1\12\1\13\1\14\1\15\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\12\1\74\1\25\1\66\1\26"+
    "\1\75\1\66\1\76\1\31\1\12\1\77\1\100\1\34"+
    "\1\101\1\36\2\12\1\37\1\12\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\14\1\12\1\46\1\12\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\12\1\60\1\61\1\62\1\12\1\63\1\64\1\65"+
    "\2\115\1\0\2\115\1\116\2\115\1\116\1\115\2\116"+
    "\3\115\1\116\1\115\12\116\1\115\1\117\1\115\2\116"+
    "\7\115\6\116\2\115\3\116\2\115\1\116\3\115\72\0"+
    "\1\14\70\0\1\120\70\0\1\16\1\121\7\0\1\16"+
    "\2\0\1\16\100\0\1\122\5\0\1\123\7\0\1\124"+
    "\2\0\1\125\11\0\1\126\10\0\1\127\11\0\1\130"+
    "\2\0\1\131\1\0\1\132\50\0\1\133\2\0\1\134"+
    "\1\0\2\134\3\0\1\135\1\0\1\134\1\136\2\134"+
    "\1\137\1\134\1\140\2\134\4\0\1\141\1\142\7\0"+
    "\1\143\5\134\2\0\3\134\2\0\1\134\17\0\1\144"+
    "\1\0\1\145\3\0\1\146\1\0\1\147\22\0\1\150"+
    "\34\0\1\151\1\0\1\152\11\0\1\153\6\0\1\154"+
    "\11\0\1\155\32\0\1\156\1\0\1\157\61\0\1\160"+
    "\2\0\1\161\12\0\1\162\20\0\1\163\1\164\27\0"+
    "\1\165\6\0\1\166\5\0\1\167\1\170\10\0\1\171"+
    "\13\0\1\172\33\0\1\173\4\0\1\174\24\0\1\175"+
    "\1\0\1\176\21\0\1\177\14\0\1\200\1\0\1\201"+
    "\11\0\1\202\12\0\1\203\6\0\1\204\14\0\1\205"+
    "\11\0\1\206\55\0\1\207\11\0\1\210\2\0\1\211"+
    "\26\0\1\212\1\213\34\0\1\214\2\0\1\215\1\216"+
    "\34\0\1\217\14\0\1\220\11\0\1\221\2\0\1\222"+
    "\26\0\1\223\1\0\1\224\21\0\1\225\2\0\1\226"+
    "\13\0\1\227\3\0\1\230\15\0\1\231\1\232\1\0"+
    "\1\233\23\0\1\234\11\0\1\235\67\0\1\236\2\0"+
    "\1\237\1\240\23\0\1\241\2\0\1\242\5\0\1\243"+
    "\35\0\1\244\10\0\1\245\35\0\1\246\11\0\1\247"+
    "\55\0\1\250\11\0\1\251\67\0\1\252\2\0\1\253"+
    "\122\0\1\254\1\255\66\0\1\256\34\0\1\257\1\260"+
    "\26\0\1\261\41\0\1\262\120\0\1\263\1\264\66\0"+
    "\1\265\11\0\1\266\4\0\1\66\1\267\2\0\1\270"+
    "\1\271\3\0\1\66\2\0\1\66\2\0\1\272\4\0"+
    "\1\273\1\274\42\0\1\275\10\0\1\275\2\0\1\275"+
    "\5\0\1\276\2\0\1\122\5\0\1\277\7\0\1\124"+
    "\2\0\1\125\11\0\1\126\7\0\1\300\10\0\1\300"+
    "\2\0\1\300\53\0\1\301\1\127\7\0\1\301\1\0"+
    "\1\130\1\301\1\0\1\131\1\0\1\132\47\0\1\302"+
    "\1\133\2\0\1\134\1\0\2\134\1\0\1\302\1\0"+
    "\1\135\1\302\1\134\1\136\2\134\1\137\1\134\1\140"+
    "\2\134\4\0\1\141\1\142\7\0\1\143\5\134\2\0"+
    "\3\134\2\0\1\134\7\0\1\301\7\0\1\144\1\301"+
    "\1\145\1\0\1\301\1\0\1\146\1\0\1\147\22\0"+
    "\1\150\24\0\1\301\7\0\1\151\1\301\1\152\1\0"+
    "\1\301\7\0\1\153\6\0\1\154\11\0\1\155\22\0"+
    "\1\301\7\0\1\156\1\301\1\157\1\0\1\301\53\0"+
    "\1\301\3\0\1\165\4\0\1\301\1\0\1\166\1\301"+
    "\4\0\1\167\1\170\10\0\1\171\13\0\1\172\20\0"+
    "\1\301\10\0\1\301\1\0\1\173\1\301\3\0\1\174"+
    "\24\0\1\175\1\0\1\176\20\0\1\275\1\205\7\0"+
    "\1\275\1\0\1\206\1\275\54\0\1\303\2\0\1\303"+
    "\1\0\2\303\3\0\1\303\1\0\11\303\4\0\2\303"+
    "\7\0\6\303\2\0\3\303\2\0\1\303\2\0\1\304"+
    "\42\0\1\305\12\0\1\265\11\0\1\266\1\104\2\0"+
    "\11\104\1\0\53\104\14\0\1\306\53\0\1\107\2\0"+
    "\13\107\1\0\51\107\16\0\1\307\140\0\1\304\4\0"+
    "\1\114\1\267\2\0\1\270\1\271\3\0\1\114\2\0"+
    "\1\114\10\0\1\274\42\0\2\116\2\0\1\116\1\0"+
    "\2\116\1\0\1\116\1\0\15\116\2\0\2\116\7\0"+
    "\6\116\2\0\3\116\2\0\1\116\10\0\1\310\2\0"+
    "\1\310\1\0\2\310\3\0\1\310\1\0\12\310\3\0"+
    "\2\310\7\0\6\310\2\0\3\310\2\0\1\310\7\0"+
    "\1\311\10\0\1\311\2\0\1\311\73\0\1\312\11\0"+
    "\1\313\41\0\1\314\25\0\1\315\11\0\1\316\1\317"+
    "\23\0\1\320\20\0\1\321\113\0\1\322\66\0\1\323"+
    "\40\0\1\324\2\0\1\325\21\0\1\326\1\327\70\0"+
    "\1\330\54\0\1\331\103\0\1\332\1\333\21\0\1\134"+
    "\2\0\1\134\1\334\2\134\3\0\1\134\1\0\11\134"+
    "\4\0\2\134\7\0\6\134\2\0\3\134\2\0\1\335"+
    "\10\0\1\134\2\0\1\134\1\334\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\2\134\7\0\6\134\2\0\3\134"+
    "\2\0\1\134\10\0\1\134\2\0\1\134\1\334\2\134"+
    "\3\0\1\134\1\0\11\134\4\0\2\134\7\0\3\134"+
    "\1\336\2\134\2\0\3\134\2\0\1\134\10\0\1\134"+
    "\2\0\1\134\1\334\2\134\3\0\1\134\1\0\11\134"+
    "\4\0\1\134\1\337\7\0\6\134\2\0\3\134\2\0"+
    "\1\134\10\0\1\134\2\0\1\134\1\334\2\134\3\0"+
    "\1\134\1\0\1\134\1\340\7\134\4\0\2\134\7\0"+
    "\6\134\2\0\3\134\2\0\1\134\10\0\1\341\2\0"+
    "\1\134\1\334\2\134\3\0\1\134\1\0\11\134\4\0"+
    "\1\342\1\134\7\0\6\134\2\0\3\134\2\0\1\134"+
    "\10\0\1\134\2\0\1\134\1\334\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\2\134\7\0\3\134\1\343\2\134"+
    "\2\0\3\134\2\0\1\134\10\0\1\344\2\0\1\134"+
    "\1\334\2\134\3\0\1\345\1\0\11\134\4\0\2\134"+
    "\7\0\6\134\2\0\3\134\2\0\1\134\10\0\1\346"+
    "\2\0\1\134\1\334\2\134\3\0\1\134\1\0\11\134"+
    "\4\0\1\347\1\134\7\0\6\134\2\0\3\134\2\0"+
    "\1\134\20\0\1\350\67\0\1\351\122\0\1\352\56\0"+
    "\1\353\47\0\1\354\2\0\1\355\62\0\1\356\2\0"+
    "\1\356\64\0\1\357\2\0\1\357\54\0\1\360\30\0"+
    "\1\361\100\0\1\362\56\0\1\363\35\0\2\364\2\0"+
    "\1\364\2\0\1\364\1\0\1\364\2\0\1\364\1\0"+
    "\1\364\2\0\1\364\22\0\1\364\23\0\2\365\2\0"+
    "\1\365\2\0\1\365\1\0\1\365\2\0\1\365\1\0"+
    "\1\365\2\0\1\365\22\0\1\365\73\0\1\366\41\0"+
    "\1\367\67\0\1\370\31\0\1\371\56\0\1\372\56\0"+
    "\1\373\11\0\1\374\65\0\1\165\6\0\1\375\40\0"+
    "\1\376\20\0\1\377\3\0\1\u0100\33\0\1\u0101\16\0"+
    "\1\u0102\11\0\1\u0103\13\0\1\u0104\25\0\1\u0105\5\0"+
    "\1\u0106\111\0\1\u0107\54\0\1\u0108\7\0\1\u0109\57\0"+
    "\1\u010a\66\0\1\u010b\100\0\1\u010c\14\0\1\u010d\57\0"+
    "\1\u010e\34\0\1\u010f\5\0\1\u0110\57\0\1\u0111\2\0"+
    "\1\u0112\27\0\1\u0113\30\0\1\u0114\113\0\1\u0115\67\0"+
    "\1\u0116\66\0\1\u0117\70\0\1\u0118\54\0\1\u0119\1\0"+
    "\1\u011a\51\0\1\u011b\15\0\1\u011c\22\0\1\u011d\1\u011e"+
    "\30\0\1\u011f\36\0\1\u0120\22\0\1\u0121\11\0\1\u0122"+
    "\4\0\1\u0123\115\0\1\u0124\22\0\1\u0125\112\0\1\u0126"+
    "\70\0\1\u0127\25\0\1\u0128\40\0\1\u0129\6\0\1\u012a"+
    "\103\0\1\u012b\63\0\1\u012c\3\0\1\u012d\63\0\1\u012e"+
    "\57\0\1\u012f\7\0\1\u0130\2\0\1\u0131\22\0\1\u0132"+
    "\107\0\1\u0133\11\0\1\u0134\102\0\1\u0135\41\0\1\u0136"+
    "\102\0\1\u0137\67\0\1\u0138\57\0\1\u0139\20\0\1\u013a"+
    "\27\0\1\u013b\26\0\1\u013c\13\0\1\u013d\42\0\1\u013e"+
    "\20\0\1\u013f\42\0\1\u0140\64\0\1\u0141\2\0\1\u0142"+
    "\71\0\1\u0143\113\0\1\u0144\24\0\1\u0145\106\0\1\u0146"+
    "\1\u0147\21\0\1\u0148\42\0\1\u0149\3\0\1\u014a\7\0"+
    "\1\u014b\11\0\1\u014c\6\0\1\u014d\61\0\1\u014e\71\0"+
    "\1\u014f\24\0\1\u0150\126\0\1\u0151\67\0\1\u0152\44\0"+
    "\1\u0153\50\0\1\u0154\16\0\1\u0155\67\0\1\u0156\102\0"+
    "\1\u0157\34\0\1\u0158\1\0\2\u0159\5\0\1\u0158\2\0"+
    "\1\u0158\53\0\1\u015a\1\0\2\u015b\5\0\1\u015a\2\0"+
    "\1\u015a\47\0\4\u015c\1\302\1\u015d\2\u015c\1\270\1\u015c"+
    "\2\0\1\u015c\1\302\1\u015c\1\0\1\302\11\0\4\u015c"+
    "\2\0\7\u015c\6\0\2\u015c\3\0\2\u015c\1\0\3\u015c"+
    "\4\0\1\275\4\0\1\u015e\3\0\1\275\2\0\1\275"+
    "\53\0\1\275\10\0\1\275\2\0\1\275\53\0\1\275"+
    "\3\0\1\314\4\0\1\275\2\0\1\275\15\0\1\315"+
    "\11\0\1\316\1\317\22\0\1\300\10\0\1\300\2\0"+
    "\1\300\7\0\1\273\43\0\1\301\4\0\1\u015f\3\0"+
    "\1\301\2\0\1\301\53\0\1\302\1\u015d\2\0\1\270"+
    "\4\0\1\302\2\0\1\302\56\0\1\u0160\31\0\1\u0161"+
    "\1\u0162\31\0\2\310\2\0\1\310\1\0\2\310\1\0"+
    "\1\310\1\0\15\310\1\0\1\u0163\2\310\7\0\6\310"+
    "\2\0\3\310\2\0\1\310\7\0\1\311\4\0\1\u0164"+
    "\3\0\1\311\2\0\1\311\75\0\1\u0165\7\0\1\u0166"+
    "\36\0\1\u0167\72\0\1\u0168\2\0\1\u0169\10\0\1\u016a"+
    "\1\u016b\1\u016c\1\0\1\u016d\5\0\1\u016e\11\0\1\u016f"+
    "\2\0\1\u0170\1\0\1\u0171\1\0\1\u0172\62\0\1\u0173"+
    "\34\0\1\u0174\123\0\1\u0175\67\0\1\u0176\21\0\1\u0177"+
    "\137\0\1\u0178\36\0\1\u0179\112\0\1\u017a\25\0\1\u017b"+
    "\14\0\1\u017c\71\0\1\u017d\67\0\1\u017e\56\0\1\u017f"+
    "\76\0\1\u0180\52\0\1\u0181\67\0\1\u0182\67\0\1\134"+
    "\2\0\1\134\1\u0183\2\134\3\0\1\134\1\0\11\134"+
    "\4\0\2\134\7\0\5\134\1\u0184\2\0\3\134\2\0"+
    "\1\134\10\0\1\134\2\0\1\134\1\u0185\2\134\3\0"+
    "\1\134\1\0\11\134\4\0\2\134\7\0\6\134\2\0"+
    "\3\134\2\0\1\134\10\0\1\134\2\0\1\u0186\1\334"+
    "\2\134\3\0\1\134\1\0\11\134\4\0\2\134\7\0"+
    "\6\134\2\0\3\134\2\0\1\134\10\0\1\134\2\0"+
    "\1\134\1\334\2\134\3\0\1\134\1\0\11\134\4\0"+
    "\2\134\7\0\1\u0187\5\134\2\0\3\134\2\0\1\134"+
    "\10\0\1\134\2\0\1\134\1\u0188\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\2\134\7\0\6\134\2\0\3\134"+
    "\2\0\1\134\10\0\1\134\2\0\1\134\1\u0189\2\134"+
    "\3\0\1\134\1\0\11\134\4\0\2\134\7\0\6\134"+
    "\2\0\3\134\2\0\1\134\10\0\1\134\2\0\1\134"+
    "\1\334\2\134\3\0\1\134\1\0\11\134\4\0\2\134"+
    "\7\0\2\134\1\u018a\3\134\2\0\3\134\2\0\1\134"+
    "\10\0\1\134\2\0\1\134\1\u018b\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\2\134\7\0\6\134\2\0\3\134"+
    "\2\0\1\u018c\10\0\1\134\2\0\1\134\1\334\2\134"+
    "\3\0\1\134\1\0\11\134\4\0\1\u018d\1\134\7\0"+
    "\6\134\2\0\3\134\2\0\1\134\10\0\1\134\2\0"+
    "\1\134\1\u018e\2\134\3\0\1\134\1\0\11\134\4\0"+
    "\2\134\7\0\6\134\2\0\3\134\2\0\1\134\10\0"+
    "\1\134\2\0\1\134\1\u018f\2\134\3\0\1\134\1\0"+
    "\11\134\4\0\2\134\7\0\6\134\2\0\3\134\2\0"+
    "\1\134\17\0\1\u0190\1\350\67\0\1\351\1\u0190\132\0"+
    "\1\u0191\16\0\1\u0192\127\0\1\u0193\56\0\1\u0194\44\0"+
    "\1\u0195\1\356\2\0\1\356\64\0\1\357\1\u0195\1\0"+
    "\1\357\106\0\1\u0196\12\0\1\u0197\41\0\1\u0198\123\0"+
    "\1\u0199\13\0\2\364\2\0\1\364\2\0\1\364\1\u019a"+
    "\1\364\2\0\1\364\1\0\1\364\2\0\1\364\22\0"+
    "\1\364\23\0\2\365\2\0\1\365\2\0\1\365\1\0"+
    "\1\365\1\u019a\1\0\1\365\1\0\1\365\2\0\1\365"+
    "\22\0\1\365\41\0\1\u019b\103\0\1\u019c\50\0\1\u019d"+
    "\4\0\1\u019e\102\0\1\u019f\47\0\1\u01a0\6\0\1\u01a1"+
    "\65\0\1\u01a2\50\0\1\u01a3\62\0\56\u01a4\1\0\11\u01a4"+
    "\36\0\1\u01a5\36\0\1\u01a6\110\0\1\u01a7\112\0\1\u01a8"+
    "\23\0\1\u01a9\44\0\1\u01aa\64\0\1\u01ab\71\0\1\u01ac"+
    "\45\0\1\u01ad\57\0\1\u01ae\27\0\1\u01af\1\0\1\u01b0"+
    "\40\0\1\u01b1\30\0\1\u01b2\36\0\1\u01b3\52\0\1\u01b4"+
    "\132\0\1\u01b5\74\0\1\u01b6\17\0\1\u01b7\133\0\1\u01b8"+
    "\23\0\1\u01b9\67\0\1\u01ba\121\0\1\u01bb\60\0\1\u01bc"+
    "\75\0\1\u01bd\36\0\1\u01be\134\0\1\u01bf\1\u01c0\64\0"+
    "\1\u01c1\24\0\1\u01c2\101\0\1\u01c3\60\0\1\u01c4\116\0"+
    "\1\u01c5\54\0\1\u01c6\21\0\1\u01c7\6\0\1\u01c8\67\0"+
    "\1\u01c9\40\0\1\u01ca\67\0\1\u01cb\63\0\1\u01cc\114\0"+
    "\1\u01cd\25\0\1\u01ce\132\0\1\u01cf\46\0\1\u01d0\6\0"+
    "\1\u01d1\11\0\1\u01d2\56\0\1\u01d3\14\0\1\u01d4\42\0"+
    "\1\u01d5\77\0\1\u01d6\35\0\1\u01d7\120\0\1\u01d8\102\0"+
    "\1\u01d9\40\0\1\u01da\52\0\1\u01db\25\0\1\u01dc\41\0"+
    "\1\u01dd\131\0\1\u01de\33\0\1\u01df\131\0\1\u01e0\22\0"+
    "\1\u01e1\103\0\1\u01e2\1\0\1\u01e3\113\0\1\u01e4\42\0"+
    "\1\232\42\0\1\u0133\1\u01e5\1\u01e6\65\u0133\50\0\1\u01e7"+
    "\41\0\1\u01e8\104\0\1\u01e3\40\0\1\u01e9\134\0\1\u01ea"+
    "\36\0\1\u01eb\124\0\1\u01ec\32\0\1\u01ed\101\0\1\u01ee"+
    "\11\0\1\u01ef\3\0\1\u01f0\43\0\1\u01f1\22\0\1\u01f2"+
    "\21\0\1\u01f3\131\0\1\u01f4\72\0\1\u01f5\43\0\1\u01f6"+
    "\67\0\1\u01f7\77\0\1\u01f8\100\0\1\u01f9\56\0\1\u01fa"+
    "\50\0\1\u01fb\67\0\1\u01fc\60\0\1\u01fd\36\0\1\u01fe"+
    "\71\0\1\u01ff\67\0\1\u0200\65\0\1\u0201\1\0\1\u0202"+
    "\3\0\1\u0203\36\0\1\u0204\102\0\1\u0205\47\0\1\u0206"+
    "\121\0\1\u0207\40\0\1\u0208\116\0\1\u0209\54\0\1\u020a"+
    "\103\0\1\u020b\64\0\1\u020c\56\0\1\u020d\41\0\1\u020e"+
    "\63\0\1\u0158\4\0\1\u0164\3\0\1\u0158\2\0\1\u0158"+
    "\53\0\1\u020f\10\0\1\u020f\2\0\1\u020f\53\0\1\u015a"+
    "\10\0\1\u015a\2\0\1\u015a\53\0\1\u020f\1\0\2\u0159"+
    "\5\0\1\u020f\2\0\1\u020f\53\0\1\u0210\10\0\1\u0210"+
    "\2\0\1\u0210\53\0\1\u0211\10\0\1\u0211\2\0\1\u0211"+
    "\54\0\1\u0212\2\0\1\u0212\1\0\2\u0212\3\0\1\u0212"+
    "\1\0\11\u0212\4\0\2\u0212\7\0\6\u0212\2\0\3\u0212"+
    "\2\0\1\u0212\10\0\1\303\2\0\1\303\1\0\2\303"+
    "\3\0\1\303\1\0\11\303\4\0\2\303\7\0\6\303"+
    "\2\0\3\303\2\0\1\303\4\0\1\u0213\1\u0214\36\0"+
    "\1\u0214\1\0\2\u0214\61\0\1\u0215\35\0\1\u0216\10\0"+
    "\1\u0216\2\0\1\u0216\105\0\1\u0217\70\0\1\u0218\12\0"+
    "\1\u0219\34\0\1\u021a\117\0\1\u021b\45\0\1\u021c\11\0"+
    "\1\u021d\47\0\1\u021e\4\0\1\u021f\24\0\1\u0220\23\0"+
    "\1\u0221\43\0\1\u0222\70\0\1\u0223\75\0\1\u0224\61\0"+
    "\1\u0225\34\0\1\u0226\50\0\56\u0227\1\0\11\u0227\23\0"+
    "\1\u0228\124\0\1\u0229\17\0\1\u022a\64\0\1\u022b\67\0"+
    "\1\u022c\106\0\1\u022d\32\0\1\u022e\10\0\56\u022f\1\0"+
    "\11\u022f\54\0\1\u0230\62\0\1\u0231\72\0\1\u0232\66\0"+
    "\1\u0233\71\0\1\u0234\67\0\1\u0235\63\0\1\u0236\70\0"+
    "\1\u0237\56\0\1\u0238\35\0\1\134\2\0\1\134\1\u0239"+
    "\2\134\3\0\1\134\1\0\11\134\4\0\2\134\7\0"+
    "\6\134\2\0\3\134\2\0\1\134\10\0\1\134\2\0"+
    "\1\134\1\u023a\2\134\3\0\1\134\1\0\11\134\4\0"+
    "\2\134\7\0\6\134\2\0\3\134\2\0\1\134\10\0"+
    "\1\134\2\0\1\134\1\334\2\134\3\0\1\134\1\0"+
    "\5\134\1\u023b\3\134\4\0\2\134\7\0\6\134\2\0"+
    "\3\134\2\0\1\134\10\0\1\u023c\2\0\1\134\1\334"+
    "\2\134\3\0\1\134\1\0\11\134\4\0\2\134\7\0"+
    "\6\134\2\0\3\134\2\0\1\134\10\0\1\134\2\0"+
    "\1\134\1\334\2\134\3\0\1\134\1\0\11\134\4\0"+
    "\2\134\7\0\5\134\1\u023d\2\0\3\134\2\0\1\134"+
    "\10\0\1\134\2\0\1\134\1\u023e\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\2\134\7\0\6\134\2\0\3\134"+
    "\2\0\1\134\31\0\1\u023f\122\0\1\u0240\67\0\1\u0241"+
    "\13\0\1\u0242\104\0\1\u0243\64\0\1\u0244\107\0\1\u0245"+
    "\102\0\1\u0246\65\0\1\u0247\46\0\1\u0248\110\0\1\u0249"+
    "\67\0\1\u024a\55\0\1\u024b\50\0\1\u024c\76\0\1\u024d"+
    "\63\0\1\u024e\104\0\1\u024f\57\0\1\u0250\76\0\1\u0251"+
    "\60\0\1\u0252\7\0\1\u0253\12\0\1\u0254\41\0\1\u0255"+
    "\114\0\1\u0256\42\0\1\u0257\50\0\1\u0258\134\0\1\u0259"+
    "\41\0\1\u025a\115\0\1\u025b\64\0\1\u025c\42\0\1\u025d"+
    "\32\0\1\u025e\61\0\1\u025f\75\0\1\u0260\50\0\1\u0261"+
    "\31\0\56\u0262\1\0\11\u0262\50\0\1\u0263\24\0\1\u0264"+
    "\137\0\1\u0265\60\0\1\u01bb\6\0\1\u0266\63\0\1\u0267"+
    "\3\0\1\u0268\34\0\1\u0269\64\0\1\u026a\67\0\1\u026b"+
    "\72\0\1\u026c\1\0\1\u026d\26\0\1\u026e\66\0\1\u026f"+
    "\41\0\1\u0270\101\0\1\u0271\67\0\1\u0272\77\0\1\u01c7"+
    "\6\0\1\u01c8\12\0\56\u0273\1\0\11\u0273\56\u0274\1\0"+
    "\11\u0274\5\0\1\u0275\135\0\1\u0276\40\0\1\u0277\67\0"+
    "\1\u0278\115\0\1\u0279\22\0\1\u027a\67\0\1\u027b\120\0"+
    "\1\u027c\53\0\1\u027d\52\0\1\u027e\134\0\1\u027f\54\0"+
    "\1\u0280\56\0\1\u0281\60\0\1\u0282\4\0\1\u0283\53\0"+
    "\1\u0284\36\0\1\u0285\5\0\1\u0286\36\0\1\u0287\50\0"+
    "\1\u0288\62\0\56\u0289\1\0\11\u0289\24\0\1\u01e2\70\0"+
    "\1\u0133\47\0\1\u0133\101\0\1\u028a\52\0\1\u01e6\134\0"+
    "\1\u028b\47\0\1\u028c\45\0\1\u01e2\62\0\56\u028d\1\0"+
    "\11\u028d\50\0\1\u028e\72\0\1\u028f\36\0\1\u0290\1\0"+
    "\1\u0291\114\0\1\u0292\23\0\1\u0293\131\0\1\u0294\37\0"+
    "\1\u0295\72\0\1\u0296\52\0\1\u0297\110\0\1\u0298\65\0"+
    "\1\u0299\50\0\1\u029a\137\0\1\u029b\64\0\1\u029c\65\0"+
    "\1\u029d\74\0\1\u029e\1\0\1\u029f\13\0\1\u02a0\133\0"+
    "\1\u02a1\72\0\1\u02a2\72\0\1\u02a3\64\0\1\u02a4\15\0"+
    "\56\u02a5\1\0\11\u02a5\37\0\1\u02a6\40\0\1\u02a7\131\0"+
    "\1\u02a8\64\0\1\u02a9\56\0\1\u02aa\36\0\1\u02ab\67\0"+
    "\1\u02ac\67\0\1\u02ad\67\0\1\u02ae\137\0\1\u02af\16\0"+
    "\1\u0210\1\u015f\7\0\1\u0210\2\0\1\u0210\110\0\1\u0161"+
    "\1\u0162\27\0\1\u02b0\120\0\1\u02b1\111\0\1\u02b2\22\0"+
    "\1\u02b3\116\0\1\u02b4\47\0\1\u02b5\106\0\1\u02b6\103\0"+
    "\1\u02b7\64\0\1\u02b8\57\0\1\u02b9\77\0\1\u02ba\33\0"+
    "\1\u02bb\73\0\1\u02bc\100\0\1\u02bd\63\0\1\u02be\53\0"+
    "\1\u02bf\64\0\1\u02c0\106\0\1\u02c1\115\0\1\u02c2\54\0"+
    "\1\u02c3\55\0\1\u02c4\65\0\1\u02c5\66\0\1\u02c6\64\0"+
    "\1\u02c7\122\0\1\u02c8\64\0\1\u02c9\75\0\1\u02ca\34\0"+
    "\1\u02cb\52\0\1\u02cc\120\0\1\u02cd\57\0\1\u02ce\46\0"+
    "\1\u02cf\2\0\1\134\1\334\2\134\3\0\1\134\1\0"+
    "\11\134\4\0\2\134\7\0\6\134\2\0\3\134\2\0"+
    "\1\134\10\0\1\134\2\0\1\134\1\u02d0\2\134\3\0"+
    "\1\134\1\0\11\134\4\0\2\134\7\0\6\134\2\0"+
    "\3\134\2\0\1\134\10\0\1\134\2\0\1\134\1\u02d1"+
    "\2\134\3\0\1\134\1\0\11\134\4\0\2\134\7\0"+
    "\6\134\2\0\3\134\2\0\1\134\33\0\1\u02d2\47\0"+
    "\1\u02d3\134\0\1\u02d4\22\0\1\u02d5\115\0\1\u02d6\70\0"+
    "\1\u02d7\100\0\1\u02d8\41\0\1\u02d9\71\0\1\u02da\102\0"+
    "\1\u02db\53\0\1\u02dc\66\0\1\u02dd\64\0\1\u02de\107\0"+
    "\1\u02df\56\0\1\u02e0\77\0\1\u02e1\60\0\1\u02e2\106\0"+
    "\1\u0250\6\0\1\u02e3\17\0\1\u02e4\120\0\1\u02e5\56\0"+
    "\1\u02e6\101\0\1\u02e7\40\0\1\u02e8\131\0\1\u02e9\43\0"+
    "\1\u02ea\77\0\1\u02eb\101\0\1\u02ec\24\0\1\u02ed\131\0"+
    "\1\u02ee\56\0\1\u02ef\31\0\56\u02f0\1\0\11\u02f0\56\u02f1"+
    "\1\0\11\u02f1\24\0\1\u02f2\101\0\1\u02f3\70\0\1\u02f4"+
    "\30\0\56\u02f5\1\0\11\u02f5\56\u02f6\1\0\11\u02f6\26\0"+
    "\1\u02f7\41\0\56\u02f8\1\0\11\u02f8\53\0\1\u02f9\65\0"+
    "\1\u02fa\26\0\1\u02fb\126\0\1\u02fc\73\0\1\u02fd\21\0"+
    "\1\u02fe\106\0\1\u02ff\102\0\1\u0300\35\0\1\u0301\106\0"+
    "\1\u0302\50\0\1\u0303\132\0\1\u0304\45\0\1\u0305\63\0"+
    "\1\u0306\115\0\1\u0307\27\0\1\u0308\115\0\1\u0309\67\0"+
    "\1\u030a\36\0\1\u030b\106\0\1\u030c\71\0\1\u030d\115\0"+
    "\1\u030e\52\0\1\u030f\105\0\1\u0310\36\0\1\u0311\43\0"+
    "\56\u0312\1\0\11\u0312\25\0\1\u0313\114\0\1\u0314\67\0"+
    "\1\u0133\66\0\1\u0315\71\0\1\u0316\36\0\1\u0317\52\0"+
    "\1\u0318\106\0\1\u0319\72\0\1\u031a\7\0\1\u031b\102\0"+
    "\1\u031c\67\0\1\u031d\22\0\1\u031e\121\0\1\u031f\100\0"+
    "\1\u0320\67\0\1\u0321\17\0\56\u0322\1\0\11\u0322\53\0"+
    "\1\u0323\75\0\1\u0324\6\0\56\u0325\1\0\11\u0325\52\0"+
    "\1\u0326\21\0\1\u0327\10\0\1\u0327\2\0\1\u0327\105\0"+
    "\1\u0328\70\0\1\u0329\30\0\56\u032a\1\0\11\u032a\26\0"+
    "\1\u032b\51\0\1\u032c\125\0\1\u02a7\6\0\1\u032d\72\0"+
    "\1\u032e\14\0\1\u032f\106\0\1\u0330\120\0\1\u0331\12\0"+
    "\56\u0332\1\0\11\u0332\24\0\1\u0333\43\0\56\u0334\1\0"+
    "\11\u0334\26\0\1\u0335\63\0\1\u0336\115\0\1\u0337\24\0"+
    "\1\u0338\104\0\1\u0339\52\0\1\u033a\132\0\1\u033b\24\0"+
    "\1\u033c\134\0\1\u033d\1\u033e\43\0\1\u033f\20\0\1\u0340"+
    "\24\0\1\u0341\120\0\1\u0342\102\0\1\u0343\70\0\1\u0344"+
    "\54\0\1\u0345\52\0\1\u0346\103\0\1\u0347\36\0\1\u0348"+
    "\131\0\1\u0349\70\0\1\u034a\24\0\1\u034b\120\0\1\u034c"+
    "\31\0\56\u034d\1\0\11\u034d\47\0\1\u034e\23\0\1\u034f"+
    "\24\0\1\u0350\17\0\1\u0351\74\0\1\u0352\36\0\1\u0353"+
    "\50\0\1\134\2\0\1\134\1\u0354\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\2\134\7\0\6\134\2\0\3\134"+
    "\2\0\1\134\25\0\1\u0355\67\0\1\u0356\45\0\56\u0357"+
    "\1\0\11\u0357\55\0\1\u0358\31\0\1\u0359\72\0\1\u035a"+
    "\52\0\1\u035b\132\0\1\u035c\41\0\1\u035d\120\0\1\u035e"+
    "\66\0\1\u035f\53\0\1\u0360\61\0\1\u0361\114\0\1\u0362"+
    "\67\0\1\u0363\67\0\1\u0364\50\0\1\u0365\31\0\56\u0366"+
    "\1\0\11\u0366\52\0\1\u0367\37\0\1\u0368\73\0\1\u0369"+
    "\46\0\1\u036a\67\0\1\u036b\106\0\1\u036c\101\0\1\u036d"+
    "\50\0\1\u036e\120\0\1\u036f\55\0\1\u0370\11\0\1\u0371"+
    "\74\0\1\u0372\60\0\1\u02f9\6\0\1\u0373\50\0\1\u0374"+
    "\102\0\1\u0375\65\0\1\u0376\42\0\1\u0377\120\0\1\u0378"+
    "\64\0\1\u0379\46\0\1\u037a\112\0\1\u037b\34\0\1\u037c"+
    "\106\0\1\u037d\55\0\1\u037e\116\0\1\u037f\52\0\1\u0380"+
    "\102\0\1\u0381\23\0\1\u0382\132\0\1\u0383\55\0\1\u0384"+
    "\36\0\1\u0385\120\0\1\u0386\31\0\56\u0387\1\0\11\u0387"+
    "\26\0\1\u0388\121\0\1\u0389\64\0\1\u038a\22\0\1\u01e3"+
    "\101\0\1\u0133\114\0\1\u038b\57\0\1\u038c\67\0\1\u038d"+
    "\101\0\1\u038e\67\0\1\u038f\70\0\1\u0390\53\0\1\u0391"+
    "\62\0\1\u0392\74\0\1\u0393\53\0\1\u0394\67\0\1\u0395"+
    "\71\0\1\u0396\67\0\1\u0397\43\0\56\u0398\1\0\11\u0398"+
    "\47\0\1\u0399\20\0\56\u039a\1\0\11\u039a\10\0\1\u039b"+
    "\126\0\1\u039c\101\0\1\u039d\60\0\1\u039e\64\0\1\u039f"+
    "\56\0\1\u03a0\101\0\1\u03a1\36\0\1\u03a2\67\0\1\u03a3"+
    "\122\0\1\u03a4\22\0\1\u03a5\106\0\1\u03a6\112\0\1\u03a7"+
    "\25\0\1\u03a8\111\0\1\u03a9\76\0\1\u03aa\53\0\1\u03ab"+
    "\117\0\1\u03ac\22\0\1\u03ad\104\0\1\u03ae\55\0\1\u03af"+
    "\125\0\1\u034e\6\0\1\u03b0\16\0\1\u03b1\10\0\1\u03b1"+
    "\2\0\1\u03b1\121\0\1\u03b2\34\0\1\u03b3\50\0\56\u03b4"+
    "\1\0\11\u03b4\17\0\1\u03b5\120\0\1\u03b6\55\0\1\u03b7"+
    "\31\0\56\u03b8\1\0\11\u03b8\52\0\1\u03b9\64\0\1\u03ba"+
    "\75\0\1\u03bb\50\0\1\u03bc\67\0\1\u03bd\36\0\1\u03be"+
    "\101\0\1\u03bf\55\0\1\u03c0\14\0\1\u03c1\45\0\56\u03c2"+
    "\1\0\11\u03c2\56\u03c3\1\0\11\u03c3\56\u03c4\1\0\11\u03c4"+
    "\23\0\1\u03c5\47\0\1\u03c6\134\0\1\u03c7\43\0\1\u03c8"+
    "\57\0\1\u03c9\1\0\1\u03c9\27\0\1\u036a\57\0\1\u03ca"+
    "\36\0\1\u03cb\121\0\1\u03cc\52\0\1\u03cd\71\0\1\u03ce"+
    "\50\0\1\u03cf\62\0\56\u03d0\1\0\11\u03d0\56\u03d1\1\0"+
    "\11\u03d1\24\0\1\u03d2\112\0\1\u03d3\47\0\1\u03d4\57\0"+
    "\1\u03d5\116\0\1\u037a\6\0\1\u03d6\51\0\1\u03d7\35\0"+
    "\1\u03d8\101\0\1\u03d9\55\0\1\u03da\134\0\1\u03db\72\0"+
    "\1\u03dc\67\0\1\u03dd\64\0\1\u03de\67\0\1\u03df\53\0"+
    "\1\u03e0\31\0\56\u03e1\1\0\11\u03e1\3\0\1\u03e2\112\0"+
    "\1\u03e3\67\0\1\u03e4\60\0\1\u03e5\55\0\1\u03e6\67\0"+
    "\1\u03e7\130\0\1\u0391\6\0\1\u03e8\15\0\1\u03e9\71\0"+
    "\1\u03ea\131\0\1\u03eb\56\0\1\u03ec\67\0\1\u03ed\105\0"+
    "\1\u03ee\20\0\1\u03ef\67\0\1\u03f0\72\0\1\u03f1\104\0"+
    "\1\u03f2\111\0\1\u03f3\44\0\1\u03f4\101\0\1\u03f5\102\0"+
    "\1\u03f6\26\0\1\u03f7\101\0\1\u03f8\55\0\1\u03f9\127\0"+
    "\1\u03fa\24\0\1\u03fb\130\0\1\u03a9\6\0\1\u03fc\31\0"+
    "\1\u03fd\117\0\1\u03fe\25\0\1\u03ff\121\0\1\u0400\66\0"+
    "\1\u0401\31\0\56\u0402\1\0\11\u0402\5\0\1\u0403\135\0"+
    "\1\u0404\53\0\1\u0405\35\0\1\u0406\104\0\1\u0407\45\0"+
    "\56\u0408\1\0\11\u0408\5\0\1\u0409\121\0\1\u040a\67\0"+
    "\1\u040b\43\0\1\u040c\131\0\1\u040d\16\0\1\u040e\10\0"+
    "\1\u040e\2\0\1\u040e\54\0\1\u040f\132\0\1\u0410\17\0"+
    "\1\u03c9\2\0\11\u03c9\1\u0411\1\u03c9\1\u0411\51\u03c9\10\0"+
    "\1\u0412\105\0\1\u0413\63\0\1\u0414\104\0\1\u0415\35\0"+
    "\1\u0416\67\0\1\u0417\134\0\1\u0418\15\0\56\u0419\1\0"+
    "\11\u0419\55\0\1\u041a\64\0\1\u041b\54\0\1\u041c\40\0"+
    "\1\u041d\64\0\1\u041e\62\0\56\u041f\1\0\11\u041f\56\u0420"+
    "\1\0\11\u0420\52\0\1\u0421\41\0\1\u0422\47\0\1\u0423"+
    "\10\0\1\u0423\2\0\1\u0423\73\0\1\u0424\114\0\1\u0425"+
    "\55\0\1\u0426\30\0\56\u0427\1\0\11\u0427\4\0\1\u0428"+
    "\10\0\1\u0428\2\0\1\u0428\121\0\1\u0429\53\0\1\u042a"+
    "\36\0\1\u042b\67\0\1\u042c\121\0\1\u042d\52\0\1\u042e"+
    "\67\0\1\u042f\64\0\1\u0430\106\0\1\u0431\102\0\1\u0432"+
    "\71\0\1\u0433\65\0\1\u0434\40\0\1\u0435\45\0\56\u0436"+
    "\1\0\11\u0436\52\0\1\u0437\65\0\1\u0438\24\0\1\u0439"+
    "\132\0\1\u043a\47\0\1\u043b\75\0\1\u043c\50\0\1\u043d"+
    "\117\0\1\u043e\20\0\56\u043f\1\0\11\u043f\1\u03c9\1\u01e5"+
    "\1\u01e6\11\u03c9\1\u0411\1\u03c9\1\u0411\51\u03c9\55\0\1\u0440"+
    "\17\0\1\u0441\131\0\1\u0442\25\0\1\u0443\110\0\1\u0444"+
    "\121\0\1\u0445\7\0\56\u0446\1\0\11\u0446\24\0\1\u0447"+
    "\102\0\1\u0448\47\0\1\u0449\76\0\1\u044a\77\0\1\u044b"+
    "\34\0\1\u044c\71\0\1\u044d\137\0\1\u044e\50\0\1\u044f"+
    "\67\0\1\u0450\101\0\1\u0451\56\0\1\u0452\54\0\1\u0453"+
    "\112\0\1\u0454\72\0\1\u0455\64\0\1\u0456\25\0\1\u0457"+
    "\106\0\1\u0458\112\0\1\u0459\71\0\1\u045a\23\0\1\u045b"+
    "\62\0\56\u045c\1\0\11\u045c\55\0\1\u045d\22\0\1\u045e"+
    "\105\0\1\u045f\100\0\1\u0460\34\0\1\u0461\10\0\1\u0461"+
    "\2\0\1\u0461\57\0\1\u0462\57\0\56\u0463\1\0\11\u0463"+
    "\22\0\1\u0464\52\0\1\u0465\121\0\1\u0466\35\0\1\u0467"+
    "\67\0\1\u0468\110\0\1\u0469\46\0\1\u046a\110\0\1\u046b"+
    "\41\0\56\u046c\1\0\11\u046c\22\0\1\u046d\71\0\1\u046e"+
    "\120\0\1\u046f\17\0\1\u0470\106\0\1\u0471\74\0\1\u0472"+
    "\104\0\1\u0473\6\0\1\u0474\25\0\1\u0475\124\0\1\u0476"+
    "\17\0\56\u0477\1\0\11\u0477\17\0\1\u0478\53\0\1\u0479"+
    "\64\0\56\u047a\1\0\11\u047a\47\0\1\u047b\57\0\1\u047c"+
    "\34\0\1\u047d\10\0\1\u047d\2\0\1\u047d\54\0\1\u047e"+
    "\65\0\1\u047f\70\0\1\u0480\10\0\1\u0480\2\0\1\u0480"+
    "\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[51464];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\1\1\1\11\3\1\2\11\3\1\2\11"+
    "\10\1\2\11\2\1\3\11\13\1\2\11\1\1\1\11"+
    "\20\1\1\11\3\1\2\11\2\1\1\11\2\1\1\11"+
    "\7\0\1\1\36\0\2\11\1\1\14\0\1\1\5\0"+
    "\1\11\37\0\3\11\4\0\4\11\3\0\3\11\5\0"+
    "\1\1\1\0\4\11\4\0\1\1\17\0\1\11\26\0"+
    "\1\11\6\0\1\1\75\0\1\1\14\0\1\11\22\0"+
    "\1\1\1\0\1\1\1\0\1\11\11\0\1\11\16\0"+
    "\1\1\1\0\1\1\10\0\1\11\2\0\1\11\1\0"+
    "\1\11\2\0\2\11\1\0\1\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\1\2\0\2\11\11\0\1\11"+
    "\17\0\1\1\4\0\1\11\2\0\1\11\4\0\1\1"+
    "\1\0\1\11\6\0\1\11\3\0\1\11\7\0\2\11"+
    "\3\0\1\11\2\0\1\1\6\0\1\1\1\11\5\0"+
    "\1\11\6\0\2\11\10\0\2\1\13\0\1\11\3\0"+
    "\4\1\1\0\1\1\1\11\1\0\1\1\3\0\1\11"+
    "\1\0\1\11\12\0\1\11\1\0\1\11\5\0\1\11"+
    "\11\0\2\11\3\0\1\11\1\0\1\1\20\0\1\11"+
    "\15\0\1\11\2\0\1\11\20\0\3\11\6\0\1\11"+
    "\14\0\1\11\3\0\1\11\11\0\2\11\1\0\1\11"+
    "\12\0\1\11\5\0\3\11\1\1\1\0\1\11\23\0"+
    "\1\11\7\0\1\1\3\0\2\11\11\0\1\1\11\0"+
    "\1\11\4\0\2\11\1\0\2\11\1\1\2\11\1\0"+
    "\1\1\1\0\2\11\1\0\1\11\13\0\1\11\5\0"+
    "\1\11\2\0\1\11\4\0\1\11\14\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\1\1\3\11\1\0\1\11"+
    "\1\0\2\11\2\0\1\11\1\0\2\11\4\0\1\11"+
    "\6\0\1\11\12\0\2\11\6\0\1\11\2\0\1\11"+
    "\11\0\1\11\4\0\1\11\1\1\3\0\1\11\12\0"+
    "\1\11\2\0\1\11\1\0\1\11\3\0\1\11\2\0"+
    "\1\11\4\0\1\11\1\0\1\11\1\0\1\1\6\0"+
    "\1\1\5\0\1\11\1\0\1\11\1\0\1\11\1\1"+
    "\12\0\1\11\6\0\1\11\1\0\1\1\2\0\1\11"+
    "\3\0\3\11\1\0\1\11\3\0\1\11\1\0\3\11"+
    "\5\0\1\11\1\0\1\11\2\0\3\11\16\0\2\11"+
    "\2\0\1\11\1\0\1\11\4\0\1\11\3\0\1\11"+
    "\3\0\1\11\1\0\1\11\5\0\1\11\2\0\2\11"+
    "\2\0\1\11\2\0\5\11\4\0\1\1\2\11\5\0"+
    "\1\11\2\0\1\11\1\0\6\11\2\0\1\1\3\0"+
    "\1\11\2\1\2\0\1\11\6\0\1\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\4\11\3\0\2\11\3\0\1\11\2\0\1\11"+
    "\3\0\2\11\3\0\2\11\3\0\1\11\1\1\1\0"+
    "\3\11\1\0\2\11\2\0\1\1\1\11\3\0\1\11"+
    "\1\0\1\1\3\0\2\11\2\0\1\11\1\0\2\1"+
    "\1\11\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private IToken prevToken = null;

    private FixedFormLexerPrepass prepass;

    public FixedFormLexerPhase1(Reader in, FixedFormLexerPrepass _prepass) {
        this(new LineAppendingReader(in));
        this.prepass=_prepass;
    }

    //unset start of line state
    private void unsetSOL() {
        if (yystate()==YYINITIAL) yybegin(YYSTANDARD);
    }
    
    // JO
    // IMPORTANT: If this is called on a new type of statement,
    //            PreLexerLine#hollerithsOK() in FixedFormLexerPrepass
    //            must also be modified to recognize the statement.
    //            This ensures that spaces will be removed from the
    //            text it would otherwise treat as a Hollerith.  (This
    //            can lead to errors like "extraneous character: (space)"
    //            and "Hollerith spans multiple lines without continuation")
    private void disallowHolleriths() {
        if (yystate()==YYSTANDARD) yybegin(YYSTANDARD_NOHOLLERITH);
    }

    public int getLine() {
        return prepass.getLine(yychar);
    }

    public int getCol() {
        return prepass.getColumn(yychar);
    }

    protected FileOrIFile lastTokenFile = null;
    protected int lastTokenLine = 1, lastTokenCol = 1, lastTokenFileOffset = 0, lastTokenStreamOffset = 0, lastTokenLength = 0;

    private static final Pattern eol = Pattern.compile("(\\r|\\n)+");

    protected boolean isEOL(String string)
    {
        return eol.matcher(string).matches();
    }

    private IToken token(Terminal terminal)
    {
        //For some there are 2 terminals of type Terminal.END_OF_INPUT that get here in a row
        // so, technically, the function below sets the whitespaceAfter on the first one it sees,
        // which is not really the expected behavior, but that token's whitespace is not used for
        // anything anyway, so this should be OK
        if(prevToken != null && terminal == Terminal.END_OF_INPUT)
        {
            //We need to manually set this, because the input string to the lexer does not
            // have any whitespace, or at the very list has it trimmed, so we are loosing all
            // of the trailing whitespace on any refactoring. That is why we assign it as
            // whitespaceAfter to the last END_OF_STATEMENT token before END_OF_INPUT
            String whiteAfter = prepass.getTrailingWhitespace();
            prevToken.setWhiteAfter(whiteAfter);
        }

        lastTokenLine = prepass.getLine(yychar)+1;
        lastTokenCol = prepass.getColumn(yychar)+1;
        lastTokenFileOffset = prepass.getOffset(yychar);
        lastTokenStreamOffset = prepass.getOffset(yychar);
        lastTokenLength = prepass.getOffset(yychar+yylength()-1)-prepass.getOffset(yychar)+1;

        //For some reason the author of above code needed to add 1 to the line/col values
        // for my code, I actually need the original value of token positions, so
        // I added those variables for that
        int tokLine = lastTokenLine-1;
        int tokCol = lastTokenCol-1;
        int tokOff = lastTokenFileOffset;

        String tokenText = "";
        //If it is the end of statement, use text from original string to get the line separator.
        // For some reason the text returned by yytext() in this case is always '/n', while the
        // actual separator is '/r/n'
        if(terminal == Terminal.T_EOS)
        {
            tokenText = yytext();
            if (isEOL(tokenText))
                tokenText = prepass.getFileEOL();
        }
        //If it is the end of input, use the Lexer's text.
        else if(terminal == Terminal.END_OF_INPUT)
        {
            tokenText = yytext();
        }
        //If it is a quote, use text accumulated in the buffer string
        else if(terminal == Terminal.T_SCON || terminal == Terminal.T_HCON)
        {
            tokenText = stringBuffer.toString();
            //lastTokenColumn and lastTokenOffset of quoted strings actually IS the position of the last character
            // of that string (for some reason w/o the final quote). So, in order to correctly map it to the whitespace
            // before it, we need to shift the column and offset we are using by 1 less than the length of the string
            tokCol = tokCol - (tokenText.length() - 1);
            tokOff = tokOff - (tokenText.length() - 1);
        }
        //Otherwise, use the text directly from file (that way all the whitespace is preserved in the
        // tokens text)
        else
            tokenText = prepass.getTokenText(lastTokenFileOffset, lastTokenLength);

        prevToken = new Token(terminal,
                              prepass.getWhitespaceBefore(tokLine, tokCol, tokOff),
                              tokenText,
                              "");

        if(!tokenText.equals(yytext()) && terminal != Terminal.T_EOS)
        {
            prevToken.setPreprocessorDirective(new FixedFormReplacement(tokenText));
            prevToken.setText(yytext());
        }

        return prevToken;
    }

    /*
    private IToken token(Terminal terminal)
    {
        IToken t = new Token();
        t.setTerminal(terminal);
        t.setFilename(this.filename);
        t.setFileOffset(prepass.getOffset(yychar));
        t.setStreamOffset(prepass.getOffset(yychar));
        t.setLength(prepass.getOffset(yychar+yylength()-1)-prepass.getOffset(yychar)+1);
        t.setText(terminal == Terminal.T_SCON || terminal == Terminal.T_HCON
                  ? stringBuffer.toString()
                  : yytext());
        t.setStartLine(prepass.getLine(yychar)+1);
        t.setStartCol(prepass.getColumn(yychar)+1);
        t.setEndLine(prepass.getLine(yychar+yylength()-1)+1);
        t.setEndCol(prepass.getColumn(yychar+yylength()-1)+1);

        return t;
    }
    */

    private StringBuffer stringBuffer = null;
    private int hollerithLength = 0;

    private boolean wantEos = false;

    private String filename = "<stdin>";

    public FixedFormLexerPhase1(Reader in, FixedFormLexerPrepass _prepass, IFile file, String filename)
    {
        this(in, _prepass);
        this.lastTokenFile = new FileOrIFile(file);
        this.filename = filename;
    }

    public String getFilename()
    {
        return filename;
    }

    public int getLastTokenLine()
    {
        return lastTokenLine;
    }

    public int getLastTokenCol()
    {
        return lastTokenCol;
    }

    public FileOrIFile getLastTokenFile()
    {
        return lastTokenFile;
    }

    public int getLastTokenFileOffset()
    {
        return lastTokenFileOffset;
    }

    public int getLastTokenStreamOffset()
    {
        return lastTokenStreamOffset;
    }

    public int getLastTokenLength()
    {
        return lastTokenLength;
    }

    public void setTokenAsCurrent(IToken token)
    {
        //lastTokenFile = token.getFile();
        lastTokenLine = token.getLine();
        lastTokenCol = token.getCol();
        lastTokenFile = token.getPhysicalFile();
        lastTokenFileOffset = token.getFileOffset();
        lastTokenStreamOffset = token.getStreamOffset();
        lastTokenLength = token.getLength();
    }

//    private List/*<NonTreeToken>*/ nonTreeTokens = new LinkedList();
//    public List/*<NonTreeToken>*/ getNonTreeTokens()
//    {
//      return nonTreeTokens;
//    }
//
      private void storeNonTreeToken()
      {
//        nonTreeTokens.add(new NonTreeToken(this.filename,
//                          prepass.getOffset(yychar),   // int offset
//                          prepass.getLine(yychar)+1,   // int row
//                          prepass.getColumn(yychar)+1, // int col
//                          yytext()));
      }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  FixedFormLexerPhase1(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  FixedFormLexerPhase1(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IToken yylex() throws java.io.IOException, LexerException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_END);
          }
        case 261: break;
        case 158: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_EXTENDS);
          }
        case 262: break;
        case 136: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORMEQ);
          }
        case 263: break;
        case 226: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_CHARACTER);
          }
        case 264: break;
        case 212: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLOCKDATA);
          }
        case 265: break;
        case 78: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SAVE);
          }
        case 266: break;
        case 108: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_FINAL);
          }
        case 267: break;
        case 171: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_POINTER);
          }
        case 268: break;
        case 260: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_NON_OVERRIDABLE);
          }
        case 269: break;
        case 84: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_THEN);
          }
        case 270: break;
        case 169: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SYNCALL);
          }
        case 271: break;
        case 149: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READEQ);
          }
        case 272: break;
        case 88: 
          { storeNonTreeToken();
          }
        case 273: break;
        case 184: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DIRECTEQ);
          }
        case 274: break;
        case 86: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NONE);
          }
        case 275: break;
        case 258: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ASYNCHRONOUSEQ);
          }
        case 276: break;
        case 132: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IMPORT);
          }
        case 277: break;
        case 216: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTRINSIC);
          }
        case 278: break;
        case 220: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_PRECISION);
          }
        case 279: break;
        case 102: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ERREQ);
          }
        case 280: break;
        case 56: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_USE);
          }
        case 281: break;
        case 104: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_AND);
          }
        case 282: break;
        case 142: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PUBLIC);
          }
        case 283: break;
        case 11: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LPAREN);
          }
        case 284: break;
        case 50: 
          { stringBuffer.append("\"\"");
          }
        case 285: break;
        case 89: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_LOCK);
          }
        case 286: break;
        case 161: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DEFAULT);
          }
        case 287: break;
        case 58: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RCON);
          }
        case 288: break;
        case 46: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RCON);
          }
        case 289: break;
        case 248: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDBLOCKDATA);
          }
        case 290: break;
        case 24: 
          { stringBuffer.append('\"');
                                                  yybegin(YYSTANDARD);
                                                  wantEos = true;
                                                  return token(Terminal.T_SCON);
          }
        case 291: break;
        case 23: 
          { stringBuffer.append("'");
                                                  yybegin(YYSTANDARD);
                                                  wantEos = true;
                                                  return token(Terminal.T_SCON);
          }
        case 292: break;
        case 120: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_VALUE);
          }
        case 293: break;
        case 60: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ENUM);
          }
        case 294: break;
        case 106: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLOCK);
          }
        case 295: break;
        case 20: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASH);
          }
        case 296: break;
        case 148: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNLOCK);
          }
        case 297: break;
        case 82: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_PASS);
          }
        case 298: break;
        case 130: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTENT);
          }
        case 299: break;
        case 256: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_NON_INTRINSIC);
          }
        case 300: break;
        case 95: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_KIND);
          }
        case 301: break;
        case 186: 
          { wantEos = true; yybegin(OPERATORorFORMAT);  return token(Terminal.T_OPERATOR);
          }
        case 302: break;
        case 190: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ACTIONEQ);
          }
        case 303: break;
        case 91: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CALL);
          }
        case 304: break;
        case 194: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FUNCTION);
          }
        case 305: break;
        case 3: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_ASTERISK);
          }
        case 306: break;
        case 239: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONTIGUOUS);
          }
        case 307: break;
        case 233: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 9;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IOLENGTHEQ);
          }
        case 308: break;
        case 237: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SYNCMEMORY);
          }
        case 309: break;
        case 12: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_COMMA);
          }
        case 310: break;
        case 133: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IMPURE);
          }
        case 311: break;
        case 93: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_REAL);
          }
        case 312: break;
        case 144: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_NOPASS);
          }
        case 313: break;
        case 65: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GE);
          }
        case 314: break;
        case 236: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SYNCIMAGES);
          }
        case 315: break;
        case 201: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONTINUE);
          }
        case 316: break;
        case 19: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PERCENT);
          }
        case 317: break;
        case 115: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { wantEos = true; unsetSOL();          return token(Terminal.T_LENEQ);
          }
        case 318: break;
        case 4: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ICON);
          }
        case 319: break;
        case 101: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENTRY);
          }
        case 320: break;
        case 241: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFUNCTION);
          }
        case 321: break;
        case 170: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_GENERIC);
          }
        case 322: break;
        case 109: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FMTEQ);
          }
        case 323: break;
        case 5: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_PLUS);
          }
        case 324: break;
        case 90: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CASE);
          }
        case 325: break;
        case 77: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FILE);
          }
        case 326: break;
        case 25: 
          { hollerithLength--;
                                                    stringBuffer.append(yytext());
                                                    if (hollerithLength==0) {
                                                            yybegin(YYSTANDARD);
                                                            wantEos = true;
                                                            return token(Terminal.T_HCON);
                                                     }
          }
        case 327: break;
        case 162: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DELIMEQ);
          }
        case 328: break;
        case 41: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASHEQ);
          }
        case 329: break;
        case 225: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_CONVERTEQ);
          }
        case 330: break;
        case 68: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LE);
          }
        case 331: break;
        case 173: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PRIVATE);
          }
        case 332: break;
        case 26: 
          { throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): Hollerith literal spans multiple lines without continuation");
          }
        case 333: break;
        case 94: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_WAIT);
          }
        case 334: break;
        case 110: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_POSEQ);
          }
        case 335: break;
        case 122: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WHILE);
          }
        case 336: break;
        case 255: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_DOUBLECOMPLEX);
          }
        case 337: break;
        case 154: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_MEMORY);
          }
        case 338: break;
        case 22: 
          { throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): String literal spans multiple lines without continuation");
          }
        case 339: break;
        case 64: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_OR);
          }
        case 340: break;
        case 131: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IMAGES);
          }
        case 341: break;
        case 208: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSEWHERE);
          }
        case 342: break;
        case 27: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_UNEXPECTED_CHARACTER);
          }
        case 343: break;
        case 128: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NEQV);
          }
        case 344: break;
        case 152: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECLEQ);
          }
        case 345: break;
        case 172: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PROGRAM);
          }
        case 346: break;
        case 42: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASHSLASH);
          }
        case 347: break;
        case 147: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNITEQ);
          }
        case 348: break;
        case 114: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NMLEQ);
          }
        case 349: break;
        case 14: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQUALS);
          }
        case 350: break;
        case 219: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PARAMETER);
          }
        case 351: break;
        case 7: 
          { stringBuffer = new StringBuffer();
                                                  stringBuffer.append('\'');
                                                  yybegin(QUOTED);
          }
        case 352: break;
        case 228: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDPROGRAM);
          }
        case 353: break;
        case 247: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 10;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READWRITEEQ);
          }
        case 354: break;
        case 185: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPENEDEQ);
          }
        case 355: break;
        case 29: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_POW);
          }
        case 356: break;
        case 139: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SIZEEQ);
          }
        case 357: break;
        case 197: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_STREAMEQ);
          }
        case 358: break;
        case 70: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_BCON);
          }
        case 359: break;
        case 17: 
          { wantEos = true;                     return token(Terminal.T_RBRACKET);
          }
        case 360: break;
        case 218: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_PENDINGEQ);
          }
        case 361: break;
        case 206: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDMODULE);
          }
        case 362: break;
        case 205: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDSELECT);
          }
        case 363: break;
        case 18: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LESSTHAN);
          }
        case 364: break;
        case 223: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 8;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NEXTRECEQ);
          }
        case 365: break;
        case 189: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALLOCATE);
          }
        case 366: break;
        case 177: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_COMPLEX);
          }
        case 367: break;
        case 111: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PADEQ);
          }
        case 368: break;
        case 175: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NULLIFY);
          }
        case 369: break;
        case 214: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ASSOCIATE);
          }
        case 370: break;
        case 2: 
          { yybegin(YYINITIAL); boolean b = wantEos; wantEos = false; if (b) return token(Terminal.T_EOS); else storeNonTreeToken();
          }
        case 371: break;
        case 103: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQV);
          }
        case 372: break;
        case 160: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDTYPE);
          }
        case 373: break;
        case 187: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPTIONAL);
          }
        case 374: break;
        case 195: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SEQUENCE);
          }
        case 375: break;
        case 99: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDIF);
          }
        case 376: break;
        case 81: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_GOTO);
          }
        case 377: break;
        case 176: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_LOGICAL);
          }
        case 378: break;
        case 55: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_LEN);
          }
        case 379: break;
        case 159: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFILE);
          }
        case 380: break;
        case 134: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORALL);
          }
        case 381: break;
        case 76: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IDEQ);
          }
        case 382: break;
        case 59: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXIT);
          }
        case 383: break;
        case 245: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 10;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORMATTEDEQ);
          }
        case 384: break;
        case 217: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SUBMODULE);
          }
        case 385: break;
        case 49: 
          { stringBuffer.append("''");
          }
        case 386: break;
        case 105: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NOT);
          }
        case 387: break;
        case 57: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DCON);
          }
        case 388: break;
        case 246: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CODIMENSION);
          }
        case 389: break;
        case 73: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPEN);
          }
        case 390: break;
        case 141: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STATEQ);
          }
        case 391: break;
        case 28: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IDENT);
          }
        case 392: break;
        case 151: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RETURN);
          }
        case 393: break;
        case 188: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ABSTRACT);
          }
        case 394: break;
        case 39: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LESSTHANEQ);
          }
        case 395: break;
        case 234: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SELECTCASE);
          }
        case 396: break;
        case 232: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ASSIGNMENT);
          }
        case 397: break;
        case 40: 
          { wantEos = true;                      return token(Terminal.T_NE);
          }
        case 398: break;
        case 36: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQEQ);
          }
        case 399: break;
        case 8: 
          { stringBuffer = new StringBuffer();
                                                  stringBuffer.append('\"');
                                                  yybegin(DBLQUOTED);
          }
        case 400: break;
        case 209: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_DECIMALEQ);
          }
        case 401: break;
        case 167: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_INTEGER);
          }
        case 402: break;
        case 80: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SYNC);
          }
        case 403: break;
        case 66: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GT);
          }
        case 404: break;
        case 166: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IOMSGEQ);
          }
        case 405: break;
        case 179: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WRITEEQ);
          }
        case 406: break;
        case 79: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STOP);
          }
        case 407: break;
        case 135: 
          { wantEos = true; yybegin(OPERATORorFORMAT); return token(Terminal.T_FORMAT);
          }
        case 408: break;
        case 53: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OUT);
          }
        case 409: break;
        case 146: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_COMMON);
          }
        case 410: break;
        case 116: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CLOSE);
          }
        case 411: break;
        case 35: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_TO);
          }
        case 412: break;
        case 196: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STATUSEQ);
          }
        case 413: break;
        case 44: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PCON);
          }
        case 414: break;
        case 21: 
          { stringBuffer.append( yytext() );
          }
        case 415: break;
        case 182: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDWHERE);
          }
        case 416: break;
        case 9: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNDERSCORE);
          }
        case 417: break;
        case 92: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READ);
          }
        case 418: break;
        case 123: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WRITE);
          }
        case 419: break;
        case 75: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ZCON);
          }
        case 420: break;
        case 244: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALLOCATABLE);
          }
        case 421: break;
        case 6: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_MINUS);
          }
        case 422: break;
        case 207: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELEMENTAL);
          }
        case 423: break;
        case 235: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SUBROUTINE);
          }
        case 424: break;
        case 211: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BACKSPACE);
          }
        case 425: break;
        case 38: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GREATERTHANEQ);
          }
        case 426: break;
        case 69: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LT);
          }
        case 427: break;
        case 54: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALL);
          }
        case 428: break;
        case 63: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQ);
          }
        case 429: break;
        case 250: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDSUBMODULE);
          }
        case 430: break;
        case 85: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_TYPE);
          }
        case 431: break;
        case 168: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INQUIRE);
          }
        case 432: break;
        case 215: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTERFACE);
          }
        case 433: break;
        case 61: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSE);
          }
        case 434: break;
        case 45: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_XCON);
          }
        case 435: break;
        case 199: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NUMBEREQ);
          }
        case 436: break;
        case 156: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { wantEos = true; unsetSOL();          return token(Terminal.T_KINDEQ);
          }
        case 437: break;
        case 1: 
          { yypushback(1);
                                                        int state=yystate();
                                                        yybegin(IDENT);
                                                        IToken token = yylex();
                                                        yybegin(state);
                                                        return token;
          }
        case 438: break;
        case 257: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 12;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNFORMATTEDEQ);
          }
        case 439: break;
        case 119: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECEQ);
          }
        case 440: break;
        case 165: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALLSTOP);
          }
        case 441: break;
        case 210: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DIMENSION);
          }
        case 442: break;
        case 67: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NE);
          }
        case 443: break;
        case 47: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_LPARENSLASH);
          }
        case 444: break;
        case 33: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IN);
          }
        case 445: break;
        case 127: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_TRUE);
          }
        case 446: break;
        case 121: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WHERE);
          }
        case 447: break;
        case 126: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_DOUBLE);
          }
        case 448: break;
        case 191: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ACCESSEQ);
          }
        case 449: break;
        case 224: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 8;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NEWUNITEQ);
          }
        case 450: break;
        case 238: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 9;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_POSITIONEQ);
          }
        case 451: break;
        case 249: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDINTERFACE);
          }
        case 452: break;
        case 10: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_COLON);
          }
        case 453: break;
        case 83: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PURE);
          }
        case 454: break;
        case 222: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PROCEDURE);
          }
        case 455: break;
        case 62: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DATA);
          }
        case 456: break;
        case 143: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_TARGET);
          }
        case 457: break;
        case 34: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_GO);
          }
        case 458: break;
        case 72: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_OCON);
          }
        case 459: break;
        case 125: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSEIF);
          }
        case 460: break;
        case 145: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMEEQ);
          }
        case 461: break;
        case 230: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ENUMERATOR);
          }
        case 462: break;
        case 16: 
          { wantEos = true;                     return token(Terminal.T_LBRACKET);
          }
        case 463: break;
        case 112: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PAUSE);
          }
        case 464: break;
        case 31: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IF);
          }
        case 465: break;
        case 32: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IS);
          }
        case 466: break;
        case 98: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDDO);
          }
        case 467: break;
        case 30: 
          { wantEos = true; yybegin(YYSTANDARD); disallowHolleriths(); return token(Terminal.T_DO);
          }
        case 468: break;
        case 107: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INOUT);
          }
        case 469: break;
        case 52: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_XDOP);
          }
        case 470: break;
        case 87: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NULL);
          }
        case 471: break;
        case 118: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CYCLE);
          }
        case 472: break;
        case 164: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLANKEQ);
          }
        case 473: break;
        case 71: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_BIND);
          }
        case 474: break;
        case 129: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ASSIGN);
          }
        case 475: break;
        case 113: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PRINT);
          }
        case 476: break;
        case 43: 
          { stringBuffer = new StringBuffer();
                                                  String text = yytext();
                                                  stringBuffer.append(text);
                                                  hollerithLength=Integer.parseInt(text.substring(0,text.length()-1));
                                                  if (hollerithLength==0)
                                                      throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): Invalid length of hollerith literal: 0");
                                                  yybegin(HOLLERITH);
          }
        case 477: break;
        case 231: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DEALLOCATE);
          }
        case 478: break;
        case 251: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDPROCEDURE);
          }
        case 479: break;
        case 198: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMELIST);
          }
        case 480: break;
        case 117: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_CLASS);
          }
        case 481: break;
        case 174: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMEDEQ);
          }
        case 482: break;
        case 140: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_SIGNEQ);
          }
        case 483: break;
        case 48: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SLASHRPAREN);
          }
        case 484: break;
        case 180: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXTERNAL);
          }
        case 485: break;
        case 13: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_RPAREN);
          }
        case 486: break;
        case 200: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONTAINS);
          }
        case 487: break;
        case 153: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_REWIND);
          }
        case 488: break;
        case 150: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RESULT);
          }
        case 489: break;
        case 202: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CRITICAL);
          }
        case 490: break;
        case 137: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FILEEQ);
          }
        case 491: break;
        case 253: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 11;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SEQUENTIALEQ);
          }
        case 492: break;
        case 178: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ROUNDEQ);
          }
        case 493: break;
        case 227: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECURSIVE);
          }
        case 494: break;
        case 254: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDSUBROUTINE);
          }
        case 495: break;
        case 37: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQGREATERTHAN);
          }
        case 496: break;
        case 243: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQUIVALENCE);
          }
        case 497: break;
        case 155: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_MODULE);
          }
        case 498: break;
        case 138: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SELECT);
          }
        case 499: break;
        case 204: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFORALL);
          }
        case 500: break;
        case 229: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ENCODINGEQ);
          }
        case 501: break;
        case 97: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { wantEos = true;                     return token(Terminal.T_X_IMPL);
          }
        case 502: break;
        case 124: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { wantEos = true;                     return token(Terminal.T_X_IMPL);
          }
        case 503: break;
        case 252: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ASYNCHRONOUS);
          }
        case 504: break;
        case 183: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_DEFERRED);
          }
        case 505: break;
        case 193: 
          { wantEos = true; yybegin(IMPLICIT);   return token(Terminal.T_IMPLICIT);
          }
        case 506: break;
        case 242: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDCRITICAL);
          }
        case 507: break;
        case 163: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_FALSE);
          }
        case 508: break;
        case 203: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_VOLATILE);
          }
        case 509: break;
        case 240: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONCURRENT);
          }
        case 510: break;
        case 221: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_PROTECTED);
          }
        case 511: break;
        case 74: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ONLY);
          }
        case 512: break;
        case 259: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_DOUBLEPRECISION);
          }
        case 513: break;
        case 100: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDEQ);
          }
        case 514: break;
        case 15: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GREATERTHAN);
          }
        case 515: break;
        case 192: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 7;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IOSTATEQ);
          }
        case 516: break;
        case 213: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 8;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ADVANCEEQ);
          }
        case 517: break;
        case 181: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDBLOCK);
          }
        case 518: break;
        case 96: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FCON);
          }
        case 519: break;
        case 157: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 6;
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXISTEQ);
          }
        case 520: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case OPERATORorFORMAT: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 1153: break;
            case IMPLICIT: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 1154: break;
            case QUOTED: {
              throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before string literal terminated");
            }
            case 1155: break;
            case HOLLERITH: {
              throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before hollerith literal terminated");
            }
            case 1156: break;
            case YYSTANDARD: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 1157: break;
            case YYSTANDARD_NOHOLLERITH: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 1158: break;
            case YYINITIAL: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 1159: break;
            case DBLQUOTED: {
              throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before string literal terminated");
            }
            case 1160: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
