/* The following code was generated by JFlex 1.5.1 */

/*******************************************************************************
 * Copyright (c) 2009 University of Illinois at Urbana-Champaign and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     UIUC - Initial API and implementation
 *******************************************************************************/

/*
 * First phase of fixed form lexical analysis for Fortran 95 parser
 *
 * FixedFormLexerPhase1 acts as a "token stream" feeding FreeFormLexerPhase2
 * and is feeded by FixedFormLexerPrepass
 * (See FixedFormLexerPrepass and FixedFormLexerPhase2.java and f95t.bnf)
 *
 * @author Jeffrey Overbey and Dirk Rossow
 *
 * @see FixedFormLexerPrepass
 * @see FixedFormLexerPhase2
 * @see Parser
 *
 * NOTE: Get rid of (space out) "yybegin(YYSTANDARD);" in the lines
 * for any tokens that can appear in an IMPLICIT statement
 * (It was also omitted in the lines for T_SLASH so that
 * INTERFACE OPERATOR (/) would tokenize correctly.)
 *
 * Changes:
 * 29.06.2005 Jeff Overbey: Added Fortran INCLUDE and CPP directives
 */

package org.eclipse.photran.internal.core.lexer;

import java.util.regex.Pattern;
import java.io.Reader;
import org.eclipse.core.resources.IFile;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>FixedFormLexerPhase1.flex</tt>
 */
class FixedFormLexerPhase1 implements ILexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IMPLICIT = 2;
  public static final int QUOTED = 4;
  public static final int DBLQUOTED = 6;
  public static final int HOLLERITH = 8;
  public static final int YYSTANDARD = 10;
  public static final int YYSTANDARD_NOHOLLERITH = 12;
  public static final int OPERATORorFORMAT = 14;
  public static final int IDENT = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\2\1\73\1\73\1\1\22\0\1\47\1\45\1\16"+
    "\1\46\1\32\1\71\1\0\1\14\1\41\1\43\1\3\1\6\1\42"+
    "\1\7\1\11\1\72\2\15\6\20\2\4\1\35\1\44\1\70\1\57"+
    "\1\67\1\0\1\34\1\22\1\13\1\52\1\10\1\5\1\25\1\27"+
    "\1\23\1\24\1\12\1\63\1\50\1\55\1\40\1\17\1\30\1\66"+
    "\1\54\1\26\1\36\1\53\1\56\1\60\1\31\1\61\1\21\1\64"+
    "\1\0\1\65\1\0\1\33\1\0\1\22\1\13\1\52\1\10\1\5"+
    "\1\25\1\27\1\23\1\24\1\12\1\63\1\50\1\55\1\40\1\17"+
    "\1\30\1\66\1\54\1\26\1\36\1\53\1\56\1\60\1\31\1\61"+
    "\1\21\12\0\1\73\252\0\2\37\115\0\1\51\u1ea8\0\1\73\1\73"+
    "\u0100\0\1\62\uded5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\3\1\1\7\1\10\10\1\1\11\1\12\2\1\1\13"+
    "\1\14\1\15\7\1\1\16\2\1\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\4\1\1\1\5\1\6\10\1"+
    "\1\13\1\24\1\25\1\26\1\27\1\25\1\30\1\31"+
    "\1\32\1\13\1\4\1\33\1\34\1\33\1\35\7\0"+
    "\1\36\36\0\1\37\1\40\1\41\14\0\1\42\5\0"+
    "\1\43\37\0\1\44\1\45\4\0\1\46\1\47\1\50"+
    "\1\51\1\52\3\0\1\53\1\54\1\55\5\0\1\56"+
    "\1\0\1\57\1\60\1\61\1\62\4\0\1\63\17\0"+
    "\1\64\26\0\1\65\6\0\1\66\2\0\1\67\72\0"+
    "\1\70\14\0\1\71\22\0\1\56\1\0\1\72\1\0"+
    "\1\73\11\0\1\74\12\0\1\75\3\0\1\76\1\0"+
    "\1\77\1\100\7\0\1\101\2\0\1\102\1\0\1\103"+
    "\2\0\1\104\1\105\1\0\1\106\2\0\1\107\1\110"+
    "\1\111\1\0\1\112\2\0\1\113\1\114\2\0\1\115"+
    "\1\116\30\0\1\117\1\0\1\120\2\0\1\121\2\0"+
    "\1\122\4\0\1\123\1\0\1\124\4\0\1\125\1\126"+
    "\1\127\3\0\1\130\7\0\1\131\1\132\3\0\1\133"+
    "\2\0\1\134\1\0\1\135\4\0\2\136\3\0\1\137"+
    "\1\0\1\140\6\0\1\141\1\142\10\0\1\143\1\144"+
    "\4\0\1\145\6\0\1\146\3\0\1\147\1\56\2\150"+
    "\1\0\2\151\1\0\1\4\3\0\1\152\1\0\1\153"+
    "\13\0\1\154\16\0\1\155\1\156\4\0\1\157\1\0"+
    "\1\160\20\0\1\161\14\0\1\162\1\163\1\164\3\0"+
    "\1\165\1\166\1\0\1\167\12\0\1\170\6\0\1\171"+
    "\11\0\1\172\16\0\1\173\1\174\1\0\1\175\1\176"+
    "\2\0\1\177\4\0\1\200\6\0\1\201\1\202\1\203"+
    "\1\204\1\205\1\206\1\0\1\207\21\0\1\210\5\0"+
    "\1\211\1\0\1\212\4\0\1\213\1\214\2\0\1\215"+
    "\6\0\1\216\7\0\1\217\1\0\1\220\4\0\1\221"+
    "\1\222\1\0\1\223\1\224\1\225\1\0\1\226\15\0"+
    "\1\227\5\0\1\230\2\0\1\231\2\0\1\232\15\0"+
    "\1\233\3\0\1\234\1\0\1\144\1\235\1\236\1\0"+
    "\1\237\1\240\1\241\1\242\1\0\1\243\1\0\1\244"+
    "\4\0\1\245\6\0\1\246\12\0\1\247\4\0\1\250"+
    "\1\0\1\251\2\0\1\252\10\0\1\253\1\254\1\255"+
    "\1\256\1\0\1\257\3\0\1\260\6\0\1\261\1\262"+
    "\2\0\1\263\2\0\1\264\1\0\1\265\3\0\1\266"+
    "\2\0\1\267\5\0\1\270\1\271\1\272\6\0\1\273"+
    "\7\0\1\274\1\275\12\0\1\276\6\0\1\277\1\300"+
    "\1\212\5\0\1\301\1\302\1\303\1\304\3\0\1\305"+
    "\6\0\1\306\1\0\1\307\2\0\1\310\4\0\1\311"+
    "\5\0\1\312\1\313\2\0\1\314\2\0\1\315\1\0"+
    "\1\316\1\0\1\317\2\0\1\320\3\0\1\321\3\0"+
    "\1\322\1\0\1\323\5\0\1\324\1\325\1\0\1\326"+
    "\1\327\4\0\1\330\1\331\1\332\1\333\3\0\1\334"+
    "\1\257\1\335\1\336\5\0\1\337\2\0\1\340\1\341"+
    "\1\342\1\343\1\344\2\0\1\272\3\0\1\273\1\345"+
    "\2\0\1\346\6\0\1\347\2\0\1\350\1\0\1\351"+
    "\2\0\1\352\2\0\1\353\1\354\1\0\1\355\1\356"+
    "\1\357\3\0\1\360\1\361\2\0\1\362\1\34\2\0"+
    "\1\363\3\0\1\364\1\365\3\0\1\366\1\367\2\0"+
    "\1\370\1\345\1\0\1\371\1\372\1\0\1\373\1\374"+
    "\2\0\1\375\2\0\1\376\1\377\1\0\1\u0100\1\0"+
    "\1\u0101\1\0\1\u0102\3\0\1\u0103\1\u0100\1\u0104\1\0"+
    "\1\u0103";

  private static int [] zzUnpackAction() {
    int [] result = new int[1106];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u021c\0\u0294\0\u02d0\0\u030c\0\u021c"+
    "\0\u021c\0\u0348\0\u0384\0\u03c0\0\u021c\0\u021c\0\u03fc\0\u0438"+
    "\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u021c\0\u021c"+
    "\0\u05dc\0\u0618\0\u021c\0\u021c\0\u021c\0\u0654\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u021c"+
    "\0\u021c\0\u08ac\0\u08e8\0\u021c\0\u0924\0\u0960\0\u099c\0\u09d8"+
    "\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c"+
    "\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u021c\0\u0ca8\0\u0ce4\0\u0d20"+
    "\0\u021c\0\u021c\0\u0d5c\0\u0d98\0\u021c\0\u0dd4\0\u0e10\0\u021c"+
    "\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0"+
    "\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0"+
    "\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0"+
    "\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590"+
    "\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u021c\0\u021c"+
    "\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8"+
    "\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8"+
    "\0\u1af4\0\u1b30\0\u1b6c\0\u021c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c"+
    "\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c"+
    "\0\u0654\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0"+
    "\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0"+
    "\0\u21fc\0\u2238\0\u2274\0\u021c\0\u021c\0\u22b0\0\u22ec\0\u2328"+
    "\0\u2364\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c\0\u23a0\0\u23dc"+
    "\0\u2418\0\u021c\0\u021c\0\u021c\0\u2454\0\u2490\0\u24cc\0\u2508"+
    "\0\u2544\0\u2580\0\u25bc\0\u021c\0\u021c\0\u021c\0\u021c\0\u25f8"+
    "\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8"+
    "\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8"+
    "\0\u29f4\0\u2a30\0\u2a6c\0\u021c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c"+
    "\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c"+
    "\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c"+
    "\0\u2f58\0\u2f94\0\u021c\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0"+
    "\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u021c\0\u31ec\0\u3228\0\u3264"+
    "\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444"+
    "\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u3624"+
    "\0\u3660\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c\0\u37c8\0\u3804"+
    "\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u39e4"+
    "\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4"+
    "\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4"+
    "\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84"+
    "\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u40b0\0\u40ec\0\u4128\0\u4164"+
    "\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u021c\0\u4290\0\u42cc\0\u4308"+
    "\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434\0\u4470\0\u44ac\0\u44e8"+
    "\0\u4524\0\u4560\0\u459c\0\u45d8\0\u4614\0\u4650\0\u468c\0\u46c8"+
    "\0\u4704\0\u4740\0\u4740\0\u021c\0\u477c\0\u47b8\0\u47f4\0\u4830"+
    "\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u021c\0\u4998\0\u49d4"+
    "\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78\0\u4bb4"+
    "\0\u021c\0\u4bf0\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u021c"+
    "\0\u4d58\0\u4d94\0\u4dd0\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u021c"+
    "\0\u4efc\0\u4f38\0\u021c\0\u4f74\0\u021c\0\u4fb0\0\u4fec\0\u021c"+
    "\0\u021c\0\u5028\0\u021c\0\u5064\0\u50a0\0\u021c\0\u021c\0\u021c"+
    "\0\u50dc\0\u021c\0\u5118\0\u5154\0\u021c\0\u5190\0\u51cc\0\u5208"+
    "\0\u021c\0\u021c\0\u5244\0\u5280\0\u52bc\0\u52f8\0\u5334\0\u5370"+
    "\0\u53ac\0\u53e8\0\u5424\0\u5460\0\u549c\0\u54d8\0\u5514\0\u5550"+
    "\0\u558c\0\u55c8\0\u5604\0\u5640\0\u567c\0\u56b8\0\u56f4\0\u5730"+
    "\0\u576c\0\u57a8\0\u57e4\0\u5820\0\u021c\0\u585c\0\u5898\0\u021c"+
    "\0\u58d4\0\u5910\0\u021c\0\u594c\0\u5988\0\u59c4\0\u5a00\0\u5a3c"+
    "\0\u5a78\0\u021c\0\u5ab4\0\u5af0\0\u5b2c\0\u5b68\0\u021c\0\u021c"+
    "\0\u021c\0\u5ba4\0\u5be0\0\u5c1c\0\u021c\0\u5c58\0\u5c94\0\u5cd0"+
    "\0\u5d0c\0\u5d48\0\u5d84\0\u5dc0\0\u021c\0\u021c\0\u5dfc\0\u5e38"+
    "\0\u5e74\0\u021c\0\u5eb0\0\u5eec\0\u5f28\0\u5f64\0\u021c\0\u5fa0"+
    "\0\u5fdc\0\u6018\0\u6054\0\u6090\0\u021c\0\u60cc\0\u6108\0\u6144"+
    "\0\u021c\0\u6180\0\u021c\0\u61bc\0\u61f8\0\u6234\0\u6270\0\u62ac"+
    "\0\u62e8\0\u021c\0\u021c\0\u6324\0\u6360\0\u639c\0\u63d8\0\u6414"+
    "\0\u6450\0\u648c\0\u64c8\0\u6504\0\u6540\0\u657c\0\u65b8\0\u65f4"+
    "\0\u6630\0\u021c\0\u666c\0\u66a8\0\u66e4\0\u6720\0\u675c\0\u6798"+
    "\0\u021c\0\u67d4\0\u6810\0\u684c\0\u6888\0\u4704\0\u68c4\0\u47f4"+
    "\0\u6900\0\u693c\0\u021c\0\u6978\0\u4920\0\u69b4\0\u69f0\0\u6a2c"+
    "\0\u021c\0\u6a68\0\u021c\0\u6aa4\0\u6ae0\0\u6b1c\0\u6b58\0\u6b94"+
    "\0\u6bd0\0\u6c0c\0\u6c48\0\u6c84\0\u6cc0\0\u6cfc\0\u021c\0\u6d38"+
    "\0\u6d74\0\u6db0\0\u6dec\0\u6e28\0\u6e64\0\u6ea0\0\u6edc\0\u6f18"+
    "\0\u6f54\0\u6f90\0\u6fcc\0\u7008\0\u7044\0\u021c\0\u021c\0\u7080"+
    "\0\u70bc\0\u70f8\0\u7134\0\u021c\0\u7170\0\u71ac\0\u71e8\0\u7224"+
    "\0\u7260\0\u729c\0\u72d8\0\u7314\0\u7350\0\u738c\0\u73c8\0\u7404"+
    "\0\u7440\0\u747c\0\u74b8\0\u74f4\0\u7530\0\u756c\0\u021c\0\u75a8"+
    "\0\u75e4\0\u7620\0\u765c\0\u7698\0\u76d4\0\u7710\0\u774c\0\u7788"+
    "\0\u77c4\0\u7800\0\u783c\0\u021c\0\u021c\0\u021c\0\u7878\0\u78b4"+
    "\0\u78f0\0\u021c\0\u021c\0\u792c\0\u021c\0\u7968\0\u79a4\0\u79e0"+
    "\0\u7a1c\0\u7a58\0\u7a94\0\u7ad0\0\u7b0c\0\u7b48\0\u7b84\0\u021c"+
    "\0\u7bc0\0\u7bfc\0\u7c38\0\u7c74\0\u7cb0\0\u7cec\0\u021c\0\u7d28"+
    "\0\u7d64\0\u7da0\0\u7ddc\0\u7e18\0\u7e54\0\u7e90\0\u7ecc\0\u7f08"+
    "\0\u021c\0\u7f44\0\u7f80\0\u7fbc\0\u7ff8\0\u8034\0\u8070\0\u80ac"+
    "\0\u80e8\0\u8124\0\u8160\0\u819c\0\u81d8\0\u8214\0\u8250\0\u021c"+
    "\0\u021c\0\u828c\0\u021c\0\u021c\0\u82c8\0\u8304\0\u021c\0\u8340"+
    "\0\u837c\0\u83b8\0\u83f4\0\u021c\0\u8430\0\u846c\0\u84a8\0\u84e4"+
    "\0\u8520\0\u855c\0\u021c\0\u021c\0\u021c\0\u8598\0\u021c\0\u021c"+
    "\0\u85d4\0\u021c\0\u8610\0\u864c\0\u8688\0\u86c4\0\u8700\0\u873c"+
    "\0\u8778\0\u87b4\0\u87f0\0\u882c\0\u8868\0\u88a4\0\u88e0\0\u891c"+
    "\0\u8958\0\u8994\0\u89d0\0\u021c\0\u8a0c\0\u8a48\0\u8a84\0\u8ac0"+
    "\0\u8afc\0\u021c\0\u8b38\0\u8b74\0\u8bb0\0\u8bec\0\u8c28\0\u8c64"+
    "\0\u021c\0\u021c\0\u8ca0\0\u8cdc\0\u021c\0\u8d18\0\u8d54\0\u8d90"+
    "\0\u8dcc\0\u8e08\0\u8e44\0\u8e80\0\u8ebc\0\u8ef8\0\u8f34\0\u8f70"+
    "\0\u8fac\0\u8fe8\0\u9024\0\u021c\0\u9060\0\u021c\0\u909c\0\u90d8"+
    "\0\u9114\0\u9150\0\u021c\0\u021c\0\u918c\0\u021c\0\u021c\0\u91c8"+
    "\0\u9204\0\u9240\0\u927c\0\u92b8\0\u92f4\0\u9330\0\u936c\0\u93a8"+
    "\0\u93e4\0\u9420\0\u945c\0\u9498\0\u94d4\0\u9510\0\u954c\0\u021c"+
    "\0\u9588\0\u95c4\0\u9600\0\u963c\0\u9678\0\u021c\0\u96b4\0\u96f0"+
    "\0\u021c\0\u972c\0\u9768\0\u021c\0\u97a4\0\u97e0\0\u981c\0\u9858"+
    "\0\u9894\0\u98d0\0\u990c\0\u9948\0\u9984\0\u99c0\0\u99fc\0\u9a38"+
    "\0\u9a74\0\u021c\0\u9ab0\0\u9aec\0\u9b28\0\u021c\0\u9b64\0\u837c"+
    "\0\u021c\0\u021c\0\u9ba0\0\u021c\0\u021c\0\u021c\0\u021c\0\u9bdc"+
    "\0\u021c\0\u9c18\0\u021c\0\u9c54\0\u9c90\0\u9ccc\0\u9d08\0\u021c"+
    "\0\u9d44\0\u9d80\0\u9dbc\0\u9df8\0\u9e34\0\u9e70\0\u021c\0\u9eac"+
    "\0\u9ee8\0\u9f24\0\u9f60\0\u9f9c\0\u9fd8\0\ua014\0\ua050\0\ua08c"+
    "\0\ua0c8\0\u021c\0\ua104\0\ua140\0\ua17c\0\ua1b8\0\u021c\0\ua1f4"+
    "\0\u021c\0\ua230\0\ua26c\0\u021c\0\ua2a8\0\ua2e4\0\ua320\0\ua35c"+
    "\0\ua398\0\ua3d4\0\ua410\0\ua44c\0\u021c\0\u021c\0\u021c\0\u021c"+
    "\0\ua488\0\ua4c4\0\ua500\0\ua53c\0\ua578\0\u021c\0\ua5b4\0\ua5f0"+
    "\0\ua62c\0\ua668\0\ua6a4\0\ua6e0\0\u021c\0\u021c\0\ua71c\0\ua758"+
    "\0\u021c\0\ua794\0\ua7d0\0\u021c\0\ua80c\0\u021c\0\ua848\0\ua884"+
    "\0\ua8c0\0\u021c\0\ua8fc\0\ua938\0\u021c\0\ua974\0\ua9b0\0\ua9ec"+
    "\0\uaa28\0\uaa64\0\u021c\0\u021c\0\uaaa0\0\uaadc\0\uab18\0\uab54"+
    "\0\uab90\0\uabcc\0\uac08\0\uac44\0\uac80\0\uacbc\0\uacf8\0\uad34"+
    "\0\uad70\0\uadac\0\uade8\0\u021c\0\uae24\0\uae60\0\uae9c\0\uaed8"+
    "\0\uaf14\0\uaf50\0\uaf8c\0\uafc8\0\ub004\0\ub040\0\ub07c\0\u021c"+
    "\0\ub0b8\0\ub0f4\0\ub130\0\ub16c\0\ub1a8\0\ub1e4\0\u021c\0\u021c"+
    "\0\ua140\0\ub220\0\ub25c\0\ub298\0\ub2d4\0\ub310\0\u021c\0\u021c"+
    "\0\u021c\0\u021c\0\ub34c\0\ub388\0\ub3c4\0\u021c\0\ub400\0\ub43c"+
    "\0\ub478\0\ub4b4\0\ub4f0\0\ub52c\0\u021c\0\ub568\0\u021c\0\ub5a4"+
    "\0\ub5e0\0\u021c\0\ub61c\0\ub658\0\ub694\0\ub6d0\0\u021c\0\ub70c"+
    "\0\ub748\0\ub784\0\ub7c0\0\ub7fc\0\u021c\0\u021c\0\ub838\0\ub874"+
    "\0\u021c\0\ub8b0\0\ub8ec\0\u021c\0\ub928\0\u021c\0\ub964\0\u021c"+
    "\0\ub9a0\0\ub9dc\0\u021c\0\uba18\0\uba54\0\uba90\0\u021c\0\ubacc"+
    "\0\ubb08\0\ubb44\0\u021c\0\ubb80\0\u021c\0\ubbbc\0\ubbf8\0\ubc34"+
    "\0\ubc70\0\ubcac\0\u021c\0\u021c\0\ubce8\0\u021c\0\u021c\0\ubd24"+
    "\0\ubd60\0\ubd9c\0\ubdd8\0\u021c\0\u021c\0\u021c\0\u021c\0\ube14"+
    "\0\ube50\0\ube8c\0\u021c\0\ub478\0\u021c\0\u021c\0\ubec8\0\ubf04"+
    "\0\ubf40\0\ubf7c\0\ubfb8\0\u021c\0\ubff4\0\uc030\0\u021c\0\u021c"+
    "\0\u021c\0\u021c\0\u021c\0\uc06c\0\uc0a8\0\ub8b0\0\uc0e4\0\uc120"+
    "\0\uc15c\0\ub9a0\0\uc198\0\uc1d4\0\uc210\0\u021c\0\uc24c\0\uc288"+
    "\0\uc2c4\0\uc300\0\uc33c\0\uc378\0\u021c\0\uc3b4\0\uc3f0\0\u021c"+
    "\0\uc42c\0\u021c\0\uc468\0\uc4a4\0\u021c\0\uc4e0\0\uc51c\0\u021c"+
    "\0\u021c\0\uc558\0\u021c\0\u021c\0\u021c\0\uc594\0\uc5d0\0\uc60c"+
    "\0\u021c\0\u021c\0\uc648\0\uc684\0\u021c\0\u021c\0\uc6c0\0\uc6fc"+
    "\0\u021c\0\uc738\0\uc774\0\uc7b0\0\u021c\0\u021c\0\uc7ec\0\uc828"+
    "\0\uc864\0\u021c\0\u021c\0\uc8a0\0\uc8dc\0\u021c\0\uc648\0\uc918"+
    "\0\u021c\0\u021c\0\uc954\0\u021c\0\u021c\0\uc990\0\uc9cc\0\uca08"+
    "\0\uca44\0\uca80\0\u021c\0\u021c\0\ucabc\0\ucaf8\0\uca08\0\u021c"+
    "\0\ucb34\0\u021c\0\ucb70\0\ucbac\0\ucbe8\0\ucc24\0\ucbac\0\u021c"+
    "\0\ucc60\0\ucc60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1106];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\12\1\24\1\25\1\16\1\26\1\27"+
    "\1\16\1\30\1\31\1\12\1\32\1\33\1\34\1\35"+
    "\1\36\2\12\1\37\1\12\1\40\1\41\1\32\1\42"+
    "\1\43\1\44\1\45\1\14\1\12\1\46\1\12\1\47"+
    "\1\34\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\12\2\57\1\60\1\61\1\12\1\62\1\63\1\64"+
    "\1\65\1\0\1\12\1\13\1\14\1\15\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\12\1\74\1\25\1\66"+
    "\1\26\1\75\1\66\1\76\1\31\1\12\1\77\1\100"+
    "\1\34\1\101\1\36\2\12\1\37\1\12\1\40\1\41"+
    "\1\32\1\42\1\102\1\44\1\45\1\14\1\12\1\46"+
    "\1\12\1\47\1\34\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\12\2\57\1\60\1\61\1\12\1\62"+
    "\1\63\1\64\1\103\1\0\1\104\2\105\11\104\1\106"+
    "\57\104\1\107\2\105\13\107\1\110\55\107\1\111\2\112"+
    "\71\111\1\12\1\13\1\14\1\15\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\12\1\74\1\25\1\66\1\26"+
    "\1\75\1\66\1\76\1\31\1\12\1\77\1\100\1\34"+
    "\1\101\1\36\2\12\1\37\1\12\1\40\1\41\1\32"+
    "\1\42\1\113\1\44\1\45\1\14\1\12\1\46\1\12"+
    "\1\47\1\34\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\12\2\57\1\60\1\61\1\12\1\62\1\63"+
    "\1\64\1\103\1\0\1\12\1\13\1\14\1\15\1\114"+
    "\1\67\1\20\1\21\1\72\1\73\1\12\1\74\1\25"+
    "\1\114\1\26\1\75\1\114\1\76\1\31\1\12\1\77"+
    "\1\100\1\34\1\101\1\36\2\12\1\37\1\12\1\40"+
    "\1\41\1\32\1\42\1\113\1\44\1\45\1\14\1\12"+
    "\1\46\1\12\1\47\1\34\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\12\2\57\1\60\1\61\1\12"+
    "\1\62\1\63\1\64\1\103\1\0\1\12\1\13\1\14"+
    "\1\15\1\66\1\67\1\70\1\71\1\72\1\73\1\12"+
    "\1\74\1\25\1\66\1\26\1\75\1\66\1\76\1\31"+
    "\1\12\1\77\1\100\1\34\1\101\1\36\2\12\1\37"+
    "\1\12\1\40\1\41\1\32\1\42\1\43\1\44\1\45"+
    "\1\14\1\12\1\46\1\12\1\47\1\34\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\12\2\57\1\60"+
    "\1\61\1\12\1\62\1\63\1\64\1\65\1\0\1\115"+
    "\2\0\2\115\1\116\2\115\1\116\1\115\2\116\3\115"+
    "\1\116\1\115\12\116\1\115\1\117\1\115\1\116\1\115"+
    "\1\116\7\115\1\116\1\115\5\116\1\115\2\116\1\115"+
    "\1\116\2\115\1\116\4\115\77\0\1\14\74\0\1\120"+
    "\74\0\1\16\1\121\7\0\1\16\2\0\1\16\104\0"+
    "\1\122\6\0\1\123\7\0\1\124\3\0\1\125\11\0"+
    "\1\126\12\0\1\127\11\0\1\130\2\0\1\131\1\0"+
    "\1\132\12\0\1\132\41\0\1\133\2\0\1\134\1\0"+
    "\2\134\3\0\1\135\1\0\1\134\1\136\2\134\1\137"+
    "\1\134\1\140\2\134\4\0\1\141\1\0\1\142\7\0"+
    "\1\143\1\0\5\134\1\0\2\134\1\0\1\134\2\0"+
    "\1\134\21\0\1\144\1\0\1\145\3\0\1\146\1\0"+
    "\1\147\12\0\1\147\10\0\1\150\37\0\1\151\1\0"+
    "\1\152\11\0\1\153\7\0\1\154\12\0\1\155\34\0"+
    "\1\156\1\0\1\157\65\0\1\160\2\0\1\161\12\0"+
    "\1\162\21\0\1\163\1\162\1\164\31\0\1\165\6\0"+
    "\1\166\5\0\1\167\1\170\11\0\1\171\10\0\1\170"+
    "\3\0\1\172\35\0\1\173\4\0\1\174\12\0\1\174"+
    "\13\0\1\175\1\0\1\176\23\0\1\177\14\0\1\200"+
    "\1\0\1\201\11\0\1\202\1\201\13\0\1\203\5\0"+
    "\1\204\17\0\1\205\11\0\1\206\61\0\1\207\11\0"+
    "\1\210\2\0\1\211\30\0\1\212\1\213\36\0\1\214"+
    "\2\0\1\215\1\216\35\0\1\217\17\0\1\220\11\0"+
    "\1\221\2\0\1\222\30\0\1\223\1\0\1\224\23\0"+
    "\1\225\2\0\1\226\13\0\1\227\3\0\1\230\6\0"+
    "\1\227\7\0\1\231\1\232\2\0\1\233\25\0\1\234"+
    "\11\0\1\235\73\0\1\236\2\0\1\237\1\240\24\0"+
    "\1\241\3\0\1\242\4\0\1\243\40\0\1\244\11\0"+
    "\1\245\10\0\1\244\27\0\1\246\11\0\1\247\61\0"+
    "\1\250\11\0\1\251\73\0\1\252\2\0\1\253\130\0"+
    "\1\254\7\0\1\255\26\0\1\256\1\257\30\0\1\260"+
    "\43\0\1\261\12\0\1\261\113\0\1\262\73\0\1\263"+
    "\7\0\1\264\63\0\1\265\12\0\1\266\5\0\1\66"+
    "\1\267\2\0\1\270\1\271\3\0\1\66\2\0\1\66"+
    "\2\0\1\272\4\0\1\273\1\274\46\0\1\275\10\0"+
    "\1\275\2\0\1\275\5\0\1\276\2\0\1\122\6\0"+
    "\1\277\7\0\1\124\3\0\1\125\11\0\1\126\11\0"+
    "\1\300\10\0\1\300\2\0\1\300\57\0\1\301\1\127"+
    "\7\0\1\301\1\0\1\130\1\301\1\0\1\131\1\0"+
    "\1\132\12\0\1\132\40\0\1\302\1\133\2\0\1\134"+
    "\1\0\2\134\1\0\1\302\1\0\1\135\1\302\1\134"+
    "\1\136\2\134\1\137\1\134\1\140\2\134\4\0\1\141"+
    "\1\0\1\142\7\0\1\143\1\0\5\134\1\0\2\134"+
    "\1\0\1\134\2\0\1\134\11\0\1\301\7\0\1\144"+
    "\1\301\1\145\1\0\1\301\1\0\1\146\1\0\1\147"+
    "\12\0\1\147\10\0\1\150\27\0\1\301\7\0\1\151"+
    "\1\301\1\152\1\0\1\301\7\0\1\153\7\0\1\154"+
    "\12\0\1\155\24\0\1\301\7\0\1\156\1\301\1\157"+
    "\1\0\1\301\57\0\1\301\3\0\1\165\4\0\1\301"+
    "\1\0\1\166\1\301\4\0\1\167\1\170\11\0\1\171"+
    "\10\0\1\170\3\0\1\172\22\0\1\301\10\0\1\301"+
    "\1\0\1\173\1\301\3\0\1\174\12\0\1\174\13\0"+
    "\1\175\1\0\1\176\22\0\1\275\1\205\7\0\1\275"+
    "\1\0\1\206\1\275\60\0\1\303\2\0\1\303\1\0"+
    "\2\303\3\0\1\303\1\0\11\303\4\0\1\303\1\0"+
    "\1\303\7\0\1\303\1\0\5\303\1\0\2\303\1\0"+
    "\1\303\2\0\1\303\3\0\1\304\44\0\1\305\13\0"+
    "\1\265\12\0\1\266\1\0\1\104\2\0\11\104\1\0"+
    "\57\104\14\0\1\306\57\0\1\107\2\0\13\107\1\0"+
    "\55\107\16\0\1\307\147\0\1\304\5\0\1\114\1\267"+
    "\2\0\1\270\1\271\3\0\1\114\2\0\1\114\10\0"+
    "\1\274\46\0\2\116\2\0\1\116\1\0\2\116\1\0"+
    "\1\116\1\0\15\116\2\0\1\116\1\0\1\116\7\0"+
    "\1\116\1\0\5\116\1\0\2\116\1\0\1\116\2\0"+
    "\1\116\12\0\1\310\2\0\1\310\1\0\2\310\3\0"+
    "\1\310\1\0\12\310\3\0\1\310\1\0\1\310\7\0"+
    "\1\310\1\0\5\310\1\0\2\310\1\0\1\310\2\0"+
    "\1\310\11\0\1\311\10\0\1\311\2\0\1\311\77\0"+
    "\1\312\11\0\1\313\1\312\44\0\1\314\25\0\1\315"+
    "\13\0\1\316\1\317\25\0\1\320\20\0\1\321\22\0"+
    "\1\321\76\0\1\322\72\0\1\323\42\0\1\324\2\0"+
    "\1\325\22\0\1\326\1\0\1\327\74\0\1\330\56\0"+
    "\1\331\111\0\1\332\1\333\23\0\1\134\2\0\1\134"+
    "\1\334\2\134\3\0\1\134\1\0\11\134\4\0\1\134"+
    "\1\0\1\134\7\0\1\134\1\0\5\134\1\0\2\134"+
    "\1\0\1\134\2\0\1\335\12\0\1\134\2\0\1\134"+
    "\1\334\2\134\3\0\1\134\1\0\11\134\4\0\1\134"+
    "\1\0\1\134\7\0\1\134\1\0\5\134\1\0\2\134"+
    "\1\0\1\134\2\0\1\134\12\0\1\134\2\0\1\134"+
    "\1\334\2\134\3\0\1\134\1\0\11\134\4\0\1\134"+
    "\1\0\1\134\7\0\1\134\1\0\2\134\1\336\2\134"+
    "\1\0\2\134\1\0\1\134\2\0\1\134\12\0\1\134"+
    "\2\0\1\134\1\334\2\134\3\0\1\134\1\0\11\134"+
    "\4\0\1\134\1\0\1\337\7\0\1\134\1\0\5\134"+
    "\1\0\2\134\1\0\1\134\2\0\1\134\12\0\1\134"+
    "\2\0\1\134\1\334\2\134\3\0\1\134\1\0\1\134"+
    "\1\340\7\134\4\0\1\134\1\0\1\134\7\0\1\134"+
    "\1\0\5\134\1\0\2\134\1\0\1\134\2\0\1\134"+
    "\12\0\1\341\2\0\1\134\1\334\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\1\342\1\0\1\134\7\0\1\134"+
    "\1\0\5\134\1\0\2\134\1\0\1\134\2\0\1\134"+
    "\12\0\1\134\2\0\1\134\1\334\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\1\134\1\0\1\134\7\0\1\134"+
    "\1\0\2\134\1\343\2\134\1\0\2\134\1\0\1\134"+
    "\2\0\1\134\12\0\1\344\2\0\1\134\1\334\2\134"+
    "\3\0\1\345\1\0\11\134\4\0\1\134\1\0\1\134"+
    "\7\0\1\134\1\0\5\134\1\0\2\134\1\0\1\134"+
    "\2\0\1\134\12\0\1\346\2\0\1\134\1\334\2\134"+
    "\3\0\1\134\1\0\11\134\4\0\1\347\1\0\1\134"+
    "\7\0\1\134\1\0\5\134\1\0\2\134\1\0\1\134"+
    "\2\0\1\134\22\0\1\350\73\0\1\351\130\0\1\352"+
    "\61\0\1\353\52\0\1\354\2\0\1\355\66\0\1\356"+
    "\2\0\1\356\70\0\1\357\2\0\1\357\60\0\1\360"+
    "\30\0\1\361\105\0\1\362\61\0\1\363\41\0\2\364"+
    "\2\0\1\364\2\0\1\364\1\0\1\364\2\0\1\364"+
    "\1\0\1\364\2\0\1\364\24\0\1\364\25\0\2\365"+
    "\2\0\1\365\2\0\1\365\1\0\1\365\2\0\1\365"+
    "\1\0\1\365\2\0\1\365\24\0\1\365\77\0\1\366"+
    "\43\0\1\367\22\0\1\367\50\0\1\370\22\0\1\370"+
    "\7\0\1\371\62\0\1\372\61\0\1\373\13\0\1\374"+
    "\70\0\1\165\7\0\1\375\42\0\1\376\21\0\1\377"+
    "\1\376\3\0\1\u0100\35\0\1\u0101\16\0\1\u0102\13\0"+
    "\1\u0103\13\0\1\u0104\27\0\1\u0105\5\0\1\u0106\117\0"+
    "\1\u0107\57\0\1\u0108\7\0\1\u0109\63\0\1\u010a\71\0"+
    "\1\u010b\105\0\1\u010c\15\0\1\u010d\63\0\1\u010e\36\0"+
    "\1\u010f\5\0\1\u0110\63\0\1\u0111\2\0\1\u0112\31\0"+
    "\1\u0113\32\0\1\u0114\120\0\1\u0115\73\0\1\u0116\71\0"+
    "\1\u0117\75\0\1\u0118\57\0\1\u0119\1\0\1\u011a\10\0"+
    "\1\u0119\11\0\1\u011a\32\0\1\u011b\15\0\1\u011c\22\0"+
    "\1\u011c\1\0\1\u011d\1\u011e\32\0\1\u011f\40\0\1\u0120"+
    "\24\0\1\u0121\11\0\1\u0122\4\0\1\u0123\12\0\1\u0123"+
    "\110\0\1\u0124\24\0\1\u0125\116\0\1\u0126\74\0\1\u0127"+
    "\26\0\1\u0128\43\0\1\u0129\7\0\1\u012a\110\0\1\u012b"+
    "\66\0\1\u012c\4\0\1\u012d\66\0\1\u012e\63\0\1\u012f"+
    "\7\0\1\u0130\3\0\1\u0131\24\0\1\u0132\113\0\1\u0133"+
    "\12\0\1\u0134\107\0\1\u0135\43\0\1\u0136\12\0\1\u0136"+
    "\74\0\1\u0137\73\0\1\u0138\62\0\1\u0139\22\0\1\u013a"+
    "\31\0\1\u013b\27\0\1\u013c\14\0\1\u013d\44\0\1\u013e"+
    "\21\0\1\u013f\1\u013e\44\0\1\u0140\70\0\1\u0141\2\0"+
    "\1\u0142\75\0\1\u0143\12\0\1\u0143\106\0\1\u0144\26\0"+
    "\1\u0145\112\0\1\u0146\1\u0147\11\0\1\u0146\10\0\1\u0148"+
    "\45\0\1\u0149\3\0\1\u014a\7\0\1\u014b\12\0\1\u014a"+
    "\1\u014c\5\0\1\u014d\66\0\1\u014e\75\0\1\u014f\26\0"+
    "\1\u0150\133\0\1\u0151\73\0\1\u0152\47\0\1\u0153\12\0"+
    "\1\u0153\41\0\1\u0154\16\0\1\u0155\12\0\1\u0155\60\0"+
    "\1\u0156\12\0\1\u0156\74\0\1\u0157\37\0\1\u0158\1\0"+
    "\2\u0159\5\0\1\u0158\2\0\1\u0158\57\0\1\u015a\1\0"+
    "\2\u015b\5\0\1\u015a\2\0\1\u015a\53\0\4\u015c\1\302"+
    "\1\u015d\2\u015c\1\270\1\u015c\2\0\1\u015c\1\302\1\u015c"+
    "\1\0\1\302\11\0\4\u015c\1\0\1\u015c\1\0\7\u015c"+
    "\1\0\1\u015c\5\0\1\u015c\2\0\1\u015c\1\0\2\u015c"+
    "\1\0\5\u015c\4\0\1\275\4\0\1\u015e\3\0\1\275"+
    "\2\0\1\275\57\0\1\275\10\0\1\275\2\0\1\275"+
    "\57\0\1\275\3\0\1\314\4\0\1\275\2\0\1\275"+
    "\15\0\1\315\13\0\1\316\1\317\24\0\1\300\10\0"+
    "\1\300\2\0\1\300\7\0\1\273\47\0\1\301\4\0"+
    "\1\u015f\3\0\1\301\2\0\1\301\57\0\1\302\1\u015d"+
    "\2\0\1\270\4\0\1\302\2\0\1\302\62\0\1\u0160"+
    "\32\0\1\u0161\1\u0162\34\0\2\310\2\0\1\310\1\0"+
    "\2\310\1\0\1\310\1\0\15\310\1\0\1\u0163\1\310"+
    "\1\0\1\310\7\0\1\310\1\0\5\310\1\0\2\310"+
    "\1\0\1\310\2\0\1\310\11\0\1\311\4\0\1\u0164"+
    "\3\0\1\311\2\0\1\311\101\0\1\u0165\7\0\1\u0166"+
    "\12\0\1\u0165\27\0\1\u0167\76\0\1\u0168\2\0\1\u0169"+
    "\10\0\1\u016a\1\u016b\1\u016c\1\0\1\u016d\5\0\1\u016e"+
    "\1\u016a\11\0\1\u016c\1\u016f\2\0\1\u0170\1\0\1\u0171"+
    "\1\u0172\67\0\1\u0173\36\0\1\u0174\131\0\1\u0175\73\0"+
    "\1\u0176\23\0\1\u0177\145\0\1\u0178\40\0\1\u0179\12\0"+
    "\1\u0179\104\0\1\u017a\30\0\1\u017b\14\0\1\u017c\75\0"+
    "\1\u017d\12\0\1\u017d\60\0\1\u017e\12\0\1\u017e\47\0"+
    "\1\u017f\102\0\1\u0180\56\0\1\u0181\73\0\1\u0182\73\0"+
    "\1\134\2\0\1\134\1\u0183\2\134\3\0\1\134\1\0"+
    "\11\134\4\0\1\134\1\0\1\134\7\0\1\134\1\0"+
    "\4\134\1\u0184\1\0\2\134\1\0\1\134\2\0\1\134"+
    "\12\0\1\134\2\0\1\134\1\u0185\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\1\134\1\0\1\134\7\0\1\134"+
    "\1\0\5\134\1\0\2\134\1\0\1\134\2\0\1\134"+
    "\12\0\1\134\2\0\1\u0186\1\334\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\1\134\1\0\1\134\7\0\1\134"+
    "\1\0\5\134\1\0\2\134\1\0\1\134\2\0\1\134"+
    "\12\0\1\134\2\0\1\134\1\334\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\1\134\1\0\1\134\7\0\1\u0187"+
    "\1\0\5\134\1\0\2\134\1\0\1\134\2\0\1\134"+
    "\12\0\1\134\2\0\1\134\1\u0188\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\1\134\1\0\1\134\7\0\1\134"+
    "\1\0\5\134\1\0\2\134\1\0\1\134\2\0\1\134"+
    "\12\0\1\134\2\0\1\134\1\u0189\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\1\134\1\0\1\134\7\0\1\134"+
    "\1\0\5\134\1\0\2\134\1\0\1\134\2\0\1\134"+
    "\12\0\1\134\2\0\1\134\1\334\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\1\134\1\0\1\134\7\0\1\134"+
    "\1\0\1\134\1\u018a\3\134\1\0\2\134\1\0\1\134"+
    "\2\0\1\134\12\0\1\134\2\0\1\134\1\u018b\2\134"+
    "\3\0\1\134\1\0\11\134\4\0\1\134\1\0\1\134"+
    "\7\0\1\134\1\0\5\134\1\0\2\134\1\0\1\134"+
    "\2\0\1\u018c\12\0\1\134\2\0\1\134\1\334\2\134"+
    "\3\0\1\134\1\0\11\134\4\0\1\u018d\1\0\1\134"+
    "\7\0\1\134\1\0\5\134\1\0\2\134\1\0\1\134"+
    "\2\0\1\134\12\0\1\134\2\0\1\134\1\u018e\2\134"+
    "\3\0\1\134\1\0\11\134\4\0\1\134\1\0\1\134"+
    "\7\0\1\134\1\0\5\134\1\0\2\134\1\0\1\134"+
    "\2\0\1\134\12\0\1\134\2\0\1\134\1\u018f\2\134"+
    "\3\0\1\134\1\0\11\134\4\0\1\134\1\0\1\134"+
    "\7\0\1\134\1\0\5\134\1\0\2\134\1\0\1\134"+
    "\2\0\1\134\21\0\1\u0190\1\350\73\0\1\351\1\u0190"+
    "\137\0\2\u0191\20\0\1\u0192\135\0\1\u0193\61\0\1\u0194"+
    "\47\0\1\u0195\1\356\2\0\1\356\70\0\1\357\1\u0195"+
    "\1\0\1\357\113\0\1\u0196\13\0\1\u0197\43\0\1\u0198"+
    "\12\0\1\u0198\115\0\1\u0199\16\0\2\364\2\0\1\364"+
    "\2\0\1\364\1\u019a\1\364\2\0\1\364\1\0\1\364"+
    "\2\0\1\364\24\0\1\364\25\0\2\365\2\0\1\365"+
    "\2\0\1\365\1\0\1\365\1\u019a\1\0\1\365\1\0"+
    "\1\365\2\0\1\365\24\0\1\365\43\0\1\u019b\107\0"+
    "\1\u019c\54\0\1\u019d\4\0\1\u019e\12\0\1\u019e\74\0"+
    "\1\u019f\52\0\1\u01a0\6\0\1\u01a1\22\0\1\u01a1\46\0"+
    "\1\u01a2\12\0\1\u01a2\41\0\1\u01a3\124\0\1\u01a4\42\0"+
    "\1\u01a5\114\0\1\u01a6\22\0\1\u01a6\75\0\1\u01a7\25\0"+
    "\1\u01a8\46\0\1\u01a9\67\0\1\u01aa\76\0\1\u01ab\47\0"+
    "\1\u01ac\63\0\1\u01ad\30\0\1\u01ae\2\0\1\u01af\42\0"+
    "\1\u01b0\32\0\1\u01b1\40\0\1\u01b2\56\0\1\u01b3\140\0"+
    "\1\u01b4\100\0\1\u01b5\21\0\1\u01b6\141\0\1\u01b7\25\0"+
    "\1\u01b8\73\0\1\u01b9\126\0\1\u01ba\63\0\1\u01bb\101\0"+
    "\1\u01bc\42\0\1\u01bd\142\0\1\u01be\1\u01bf\70\0\1\u01c0"+
    "\26\0\1\u01c1\105\0\1\u01c2\64\0\1\u01c3\123\0\1\u01c4"+
    "\57\0\1\u01c5\12\0\1\u01c5\7\0\1\u01c6\7\0\1\u01c7"+
    "\73\0\1\u01c8\42\0\1\u01c9\22\0\1\u01c9\50\0\1\u01ca"+
    "\22\0\1\u01ca\44\0\1\u01cb\121\0\1\u01cc\30\0\1\u01cd"+
    "\140\0\1\u01ce\50\0\1\u01cf\6\0\1\u01d0\13\0\1\u01d1"+
    "\61\0\1\u01d2\15\0\1\u01d3\44\0\1\u01d4\104\0\1\u01d5"+
    "\40\0\1\u01d6\124\0\1\u01d7\110\0\1\u01d8\42\0\1\u01d9"+
    "\56\0\1\u01da\25\0\1\u01db\45\0\1\u01dc\136\0\1\u01dd"+
    "\36\0\1\u01de\137\0\1\u01df\24\0\1\u01e0\107\0\1\u01e1"+
    "\1\0\1\u01e2\10\0\1\u01e1\11\0\1\u01e2\76\0\1\u01e3"+
    "\44\0\1\232\46\0\1\u0133\1\u01e4\1\u01e5\71\u0133\52\0"+
    "\1\u01e6\43\0\1\u01e7\111\0\1\u01e2\43\0\1\u01e8\142\0"+
    "\1\u01e9\40\0\1\u01ea\12\0\1\u01ea\116\0\2\u01eb\34\0"+
    "\1\u01ec\12\0\1\u01ec\72\0\1\u01ed\13\0\1\u01ee\3\0"+
    "\1\u01ef\45\0\1\u01f0\24\0\1\u01f1\23\0\1\u01f2\136\0"+
    "\1\u01f3\77\0\1\u01f4\45\0\1\u01f5\22\0\1\u01f5\50\0"+
    "\1\u01f6\22\0\1\u01f6\60\0\1\u01f7\105\0\1\u01f8\61\0"+
    "\1\u01f9\54\0\1\u01fa\73\0\1\u01fb\64\0\1\u01fc\37\0"+
    "\1\u01fd\76\0\1\u01fe\73\0\1\u01ff\70\0\1\u0200\2\0"+
    "\1\u0201\3\0\1\u0202\40\0\1\u0203\12\0\1\u0203\74\0"+
    "\1\u0204\52\0\1\u0205\127\0\1\u0206\42\0\1\u0207\124\0"+
    "\1\u0208\56\0\1\u0209\111\0\1\u020a\67\0\1\u020b\61\0"+
    "\1\u020c\45\0\1\u020d\67\0\1\u0158\4\0\1\u0164\3\0"+
    "\1\u0158\2\0\1\u0158\57\0\1\u020e\10\0\1\u020e\2\0"+
    "\1\u020e\57\0\1\u015a\10\0\1\u015a\2\0\1\u015a\57\0"+
    "\1\u020e\1\0\2\u0159\5\0\1\u020e\2\0\1\u020e\57\0"+
    "\1\u020f\10\0\1\u020f\2\0\1\u020f\57\0\1\u0210\10\0"+
    "\1\u0210\2\0\1\u0210\60\0\1\u0211\2\0\1\u0211\1\0"+
    "\2\u0211\3\0\1\u0211\1\0\11\u0211\4\0\1\u0211\1\0"+
    "\1\u0211\7\0\1\u0211\1\0\5\u0211\1\0\2\u0211\1\0"+
    "\1\u0211\2\0\1\u0211\12\0\1\303\2\0\1\303\1\0"+
    "\2\303\3\0\1\303\1\0\11\303\4\0\1\303\1\0"+
    "\1\303\7\0\1\303\1\0\5\303\1\0\2\303\1\0"+
    "\1\303\2\0\1\303\6\0\1\u0212\1\u0213\37\0\1\u0213"+
    "\1\0\2\u0213\25\0\1\u0213\36\0\1\u0214\41\0\1\u0215"+
    "\10\0\1\u0215\2\0\1\u0215\111\0\1\u0216\75\0\1\u0217"+
    "\13\0\1\u0218\36\0\1\u0219\124\0\1\u021a\50\0\1\u021b"+
    "\12\0\1\u021c\52\0\1\u021d\4\0\1\u021e\12\0\1\u021e"+
    "\13\0\1\u021f\25\0\1\u0220\45\0\1\u0221\74\0\1\u0222"+
    "\100\0\1\u0223\66\0\1\u0224\36\0\1\u0225\77\0\1\u0226"+
    "\131\0\1\u0227\22\0\1\u0228\70\0\1\u0229\73\0\1\u022a"+
    "\112\0\1\u022b\12\0\1\u022b\20\0\1\u022c\71\0\1\u022d"+
    "\65\0\1\u022e\77\0\1\u022f\72\0\1\u0230\75\0\1\u0231"+
    "\73\0\1\u0232\66\0\1\u0233\75\0\1\u0234\61\0\1\u0235"+
    "\40\0\1\134\2\0\1\134\1\u0236\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\1\134\1\0\1\134\7\0\1\134"+
    "\1\0\5\134\1\0\2\134\1\0\1\134\2\0\1\134"+
    "\12\0\1\134\2\0\1\134\1\u0237\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\1\134\1\0\1\134\7\0\1\134"+
    "\1\0\5\134\1\0\2\134\1\0\1\134\2\0\1\134"+
    "\12\0\1\134\2\0\1\134\1\334\2\134\3\0\1\134"+
    "\1\0\5\134\1\u0238\3\134\4\0\1\134\1\0\1\134"+
    "\7\0\1\134\1\u0239\5\134\1\0\2\134\1\0\1\134"+
    "\2\0\1\134\12\0\1\u023a\2\0\1\134\1\334\2\134"+
    "\3\0\1\134\1\0\11\134\4\0\1\134\1\0\1\134"+
    "\7\0\1\134\1\0\5\134\1\0\2\134\1\0\1\134"+
    "\2\0\1\134\12\0\1\134\2\0\1\134\1\334\2\134"+
    "\3\0\1\134\1\0\11\134\4\0\1\134\1\0\1\134"+
    "\7\0\1\134\1\0\4\134\1\u023b\1\0\2\134\1\0"+
    "\1\134\2\0\1\134\12\0\1\134\2\0\1\134\1\u023c"+
    "\2\134\3\0\1\134\1\0\11\134\4\0\1\134\1\0"+
    "\1\134\7\0\1\134\1\0\5\134\1\0\2\134\1\0"+
    "\1\134\2\0\1\134\33\0\1\u023d\22\0\1\u023d\104\0"+
    "\2\u023e\72\0\2\u023f\15\0\1\u0240\110\0\1\u0241\70\0"+
    "\1\u0242\114\0\1\u0243\107\0\1\u0244\71\0\1\u0245\50\0"+
    "\1\u0246\116\0\1\u0247\73\0\1\u0248\57\0\1\u0249\54\0"+
    "\1\u024a\102\0\1\u024b\22\0\1\u024b\44\0\1\u024c\111\0"+
    "\1\u024d\62\0\1\u024e\102\0\1\u024f\64\0\1\u0250\10\0"+
    "\1\u0251\13\0\1\u0252\43\0\1\u0253\12\0\1\u0253\107\0"+
    "\1\u0254\44\0\1\u0255\12\0\1\u0255\41\0\1\u0256\142\0"+
    "\1\u0257\43\0\1\u0258\12\0\1\u0258\110\0\1\u0259\67\0"+
    "\1\u025a\45\0\1\u025b\34\0\1\u025c\64\0\1\u025d\102\0"+
    "\1\u025e\52\0\1\u025f\107\0\1\u0260\26\0\1\u0261\145\0"+
    "\1\u0262\63\0\1\u01ba\7\0\1\u0263\67\0\1\u0264\3\0"+
    "\1\u0265\36\0\1\u0266\70\0\1\u0267\73\0\1\u0268\76\0"+
    "\1\u0269\1\0\1\u026a\12\0\1\u026a\15\0\1\u026b\72\0"+
    "\1\u026c\43\0\1\u026d\12\0\1\u026d\72\0\1\u026e\73\0"+
    "\1\u026f\104\0\1\u01c6\7\0\1\u01c7\21\0\1\u0270\143\0"+
    "\1\u0271\42\0\1\u0272\12\0\1\u0272\60\0\1\u0273\12\0"+
    "\1\u0273\110\0\1\u0274\24\0\1\u0275\73\0\1\u0276\124\0"+
    "\1\u0277\57\0\1\u0278\56\0\1\u0279\142\0\1\u027a\57\0"+
    "\1\u027b\61\0\1\u027c\22\0\1\u027c\41\0\1\u027d\4\0"+
    "\1\u027e\12\0\1\u027e\44\0\1\u027f\37\0\1\u0280\6\0"+
    "\1\u0281\40\0\1\u0282\12\0\1\u0282\41\0\1\u0283\112\0"+
    "\1\u01e1\12\0\1\u01e1\61\0\1\u0133\53\0\1\u0133\105\0"+
    "\1\u0284\56\0\1\u01e5\141\0\1\u0285\52\0\1\u0286\51\0"+
    "\1\u01e1\140\0\1\u0287\76\0\1\u0288\40\0\1\u0289\1\0"+
    "\1\u028a\12\0\1\u028a\107\0\1\u028b\25\0\1\u028c\136\0"+
    "\1\u028d\42\0\1\u028e\76\0\1\u028f\56\0\1\u0290\114\0"+
    "\1\u0291\22\0\1\u0291\46\0\1\u0292\12\0\1\u0292\41\0"+
    "\1\u0293\145\0\1\u0294\70\0\1\u0295\71\0\1\u0296\100\0"+
    "\1\u0297\1\u0298\16\0\1\u0299\140\0\1\u029a\77\0\1\u029b"+
    "\76\0\1\u029c\70\0\1\u029d\57\0\1\u029e\43\0\1\u029f"+
    "\137\0\1\u02a0\67\0\1\u02a1\61\0\1\u02a2\42\0\1\u02a3"+
    "\73\0\1\u02a4\73\0\1\u02a5\73\0\1\u02a6\145\0\1\u02a7"+
    "\20\0\1\u020f\1\u015f\7\0\1\u020f\2\0\1\u020f\115\0"+
    "\1\u0161\1\u0162\32\0\1\u02a8\124\0\1\u02a9\117\0\1\u02aa"+
    "\24\0\1\u02ab\123\0\1\u02ac\52\0\1\u02ad\112\0\1\u02ae"+
    "\111\0\1\u02af\67\0\1\u02b0\63\0\1\u02b1\103\0\1\u02b2"+
    "\36\0\1\u02b3\77\0\1\u02b4\104\0\1\u02b5\67\0\1\u02b6"+
    "\12\0\1\u02b6\44\0\1\u02b7\70\0\1\u02b8\112\0\1\u02b9"+
    "\12\0\1\u02b9\110\0\1\u02ba\57\0\1\u02bb\60\0\1\u02bc"+
    "\71\0\1\u02bd\72\0\1\u02be\70\0\1\u02bf\130\0\1\u02c0"+
    "\67\0\1\u02c1\102\0\1\u02c2\36\0\1\u02c3\56\0\1\u02c4"+
    "\124\0\1\u02c5\63\0\1\u02c6\22\0\1\u02c6\27\0\1\u02c7"+
    "\2\0\1\134\1\334\2\134\3\0\1\134\1\0\11\134"+
    "\4\0\1\134\1\0\1\134\7\0\1\134\1\0\5\134"+
    "\1\0\2\134\1\0\1\134\2\0\1\134\12\0\1\u02c8"+
    "\73\0\1\134\2\0\1\134\1\u02c9\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\1\134\1\0\1\134\7\0\1\134"+
    "\1\0\5\134\1\0\2\134\1\0\1\134\2\0\1\134"+
    "\12\0\1\134\2\0\1\134\1\u02ca\2\134\3\0\1\134"+
    "\1\0\11\134\4\0\1\134\1\0\1\134\7\0\1\134"+
    "\1\0\5\134\1\0\2\134\1\0\1\134\2\0\1\134"+
    "\35\0\1\u02cb\53\0\1\u02cc\142\0\1\u02cd\24\0\1\u02ce"+
    "\121\0\1\u02cf\75\0\1\u02d0\105\0\1\u02d1\43\0\1\u02d2"+
    "\75\0\1\u02d3\12\0\1\u02d3\74\0\1\u02d4\56\0\1\u02d5"+
    "\72\0\1\u02d6\70\0\1\u02d7\114\0\1\u02d8\61\0\1\u02d9"+
    "\22\0\1\u02d9\60\0\1\u02da\64\0\1\u02db\113\0\1\u024e"+
    "\7\0\1\u02dc\21\0\1\u02dd\124\0\1\u02de\62\0\1\u02df"+
    "\106\0\1\u02e0\43\0\1\u02e1\137\0\1\u02e2\45\0\1\u02e3"+
    "\22\0\1\u02e3\60\0\1\u02e4\107\0\1\u02e5\26\0\1\u02e6"+
    "\136\0\1\u02e7\61\0\1\u02e8\61\0\1\u02e9\12\0\1\u02e9"+
    "\72\0\1\u02ea\75\0\1\u02eb\61\0\1\u02ec\22\0\1\u02ec"+
    "\77\0\1\u02ed\71\0\1\u02ee\30\0\1\u02ef\133\0\1\u02f0"+
    "\100\0\1\u02f1\23\0\1\u02f2\112\0\1\u02f3\12\0\1\u02f3"+
    "\74\0\1\u02f4\40\0\1\u02f5\112\0\1\u02f6\12\0\1\u02f6"+
    "\41\0\1\u02f7\140\0\1\u02f8\47\0\1\u02f9\22\0\1\u02f9"+
    "\44\0\1\u02fa\123\0\1\u02fb\31\0\1\u02fc\121\0\1\u02fd"+
    "\73\0\1\u02fe\42\0\1\u02ff\112\0\1\u0300\12\0\1\u0300"+
    "\62\0\1\u0301\22\0\1\u0301\100\0\1\u0302\55\0\1\u0303"+
    "\112\0\1\u0304\40\0\1\u0305\12\0\1\u0305\61\0\1\u0306"+
    "\122\0\1\u0307\73\0\1\u0133\72\0\1\u0308\75\0\1\u0309"+
    "\40\0\1\u030a\56\0\1\u030b\112\0\1\u030c\12\0\1\u030c"+
    "\63\0\1\u030d\10\0\1\u030e\107\0\1\u030f\73\0\1\u0310"+
    "\24\0\1\u0311\126\0\1\u0312\105\0\1\u0313\73\0\1\u0314"+
    "\76\0\1\u0315\100\0\2\u0316\64\0\1\u0317\23\0\1\u0318"+
    "\10\0\1\u0318\2\0\1\u0318\111\0\1\u0319\75\0\1\u031a"+
    "\61\0\1\u031b\22\0\1\u031b\32\0\1\u031c\132\0\1\u029f"+
    "\7\0\1\u031d\75\0\1\u031e\17\0\1\u031f\112\0\1\u0320"+
    "\12\0\1\u0320\113\0\1\u0321\40\0\1\u0322\12\0\1\u0322"+
    "\62\0\1\u0323\22\0\1\u0323\44\0\1\u0324\123\0\1\u0325"+
    "\26\0\1\u0326\110\0\1\u0327\56\0\1\u0328\140\0\1\u0329"+
    "\26\0\1\u032a\142\0\1\u032b\1\u032c\45\0\1\u032d\22\0"+
    "\1\u032e\26\0\1\u032f\124\0\1\u0330\110\0\1\u0331\74\0"+
    "\1\u0332\57\0\1\u0333\55\0\1\u0334\107\0\1\u0335\42\0"+
    "\1\u0336\136\0\1\u0337\75\0\1\u0338\26\0\1\u0339\124\0"+
    "\1\u033a\105\0\1\u033b\26\0\1\u033c\24\0\1\u033d\21\0"+
    "\1\u033e\100\0\1\u033f\40\0\1\u0340\12\0\1\u0340\41\0"+
    "\1\134\2\0\1\134\1\u0341\2\134\3\0\1\134\1\0"+
    "\11\134\4\0\1\134\1\0\1\134\7\0\1\134\1\0"+
    "\5\134\1\0\2\134\1\0\1\134\2\0\1\134\16\0"+
    "\1\u0341\104\0\1\u0342\73\0\1\u0343\130\0\1\u0344\33\0"+
    "\1\u0345\76\0\1\u0346\56\0\1\u0347\140\0\1\u0348\43\0"+
    "\1\u0349\126\0\1\u034a\72\0\1\u034b\55\0\1\u034c\65\0"+
    "\1\u034d\122\0\1\u034e\73\0\1\u034f\73\0\1\u0350\52\0"+
    "\1\u0351\111\0\1\u0352\41\0\1\u0353\77\0\1\u0354\22\0"+
    "\1\u0354\27\0\1\u0355\73\0\1\u0356\112\0\1\u0357\12\0"+
    "\1\u0357\72\0\1\u0358\54\0\1\u0359\126\0\1\u035a\57\0"+
    "\1\u035b\13\0\1\u035c\100\0\1\u035d\63\0\1\u02ed\7\0"+
    "\1\u035e\52\0\1\u035f\110\0\1\u0360\70\0\1\u0361\45\0"+
    "\1\u0362\126\0\1\u0363\70\0\1\u0364\50\0\1\u0365\120\0"+
    "\1\u0366\36\0\1\u0367\112\0\1\u0368\61\0\1\u0369\12\0"+
    "\1\u0369\111\0\1\u036a\54\0\1\u036b\110\0\1\u036c\25\0"+
    "\1\u036d\140\0\1\u036e\57\0\1\u036f\42\0\1\u0370\124\0"+
    "\1\u0371\63\0\1\u0372\22\0\1\u0372\103\0\1\u0373\71\0"+
    "\1\u0374\24\0\1\u01e2\105\0\1\u0133\121\0\1\u0375\63\0"+
    "\1\u0376\73\0\1\u0377\106\0\1\u0378\73\0\1\u0379\74\0"+
    "\1\u037a\55\0\1\u037b\66\0\1\u037c\100\0\1\u037d\57\0"+
    "\1\u037e\73\0\1\u037f\75\0\1\u0380\12\0\1\u0380\60\0"+
    "\1\u0381\12\0\1\u0381\104\0\1\u0382\33\0\1\u0383\133\0"+
    "\1\u0384\105\0\2\u0385\64\0\1\u0386\67\0\1\u0387\61\0"+
    "\1\u0388\107\0\1\u0389\40\0\1\u038a\73\0\1\u038b\130\0"+
    "\1\u038c\24\0\1\u038d\112\0\1\u038e\12\0\1\u038e\104\0"+
    "\1\u038f\30\0\1\u0390\115\0\1\u0391\102\0\1\u0392\57\0"+
    "\1\u0393\125\0\1\u0394\24\0\1\u0395\110\0\1\u0396\61\0"+
    "\1\u0397\132\0\1\u033b\7\0\1\u0398\20\0\1\u0399\10\0"+
    "\1\u0399\2\0\1\u0399\127\0\1\u039a\36\0\1\u039b\73\0"+
    "\1\u039c\126\0\1\u039d\57\0\1\u039e\111\0\1\u039f\67\0"+
    "\1\u03a0\102\0\1\u03a1\52\0\1\u03a2\73\0\1\u03a3\42\0"+
    "\1\u03a4\105\0\1\u03a5\61\0\1\u03a6\14\0\1\u03a7\74\0"+
    "\1\u03a8\53\0\1\u03a9\142\0\1\u03aa\45\0\1\u03ab\12\0"+
    "\1\u03ab\50\0\1\u03ac\1\0\1\u03ac\30\0\1\u0355\62\0"+
    "\1\u03ad\42\0\1\u03ae\126\0\1\u03af\55\0\1\u03b0\75\0"+
    "\1\u03b1\12\0\1\u03b1\41\0\1\u03b2\112\0\1\u03b3\12\0"+
    "\1\u03b3\104\0\1\u03b4\52\0\1\u03b5\63\0\1\u03b6\123\0"+
    "\1\u0365\7\0\1\u03b7\54\0\1\u03b8\40\0\1\u03b9\105\0"+
    "\1\u03ba\61\0\1\u03bb\142\0\1\u03bc\76\0\1\u03bd\73\0"+
    "\1\u03be\70\0\1\u03bf\73\0\1\u03c0\55\0\1\u03c1\40\0"+
    "\1\u03c2\116\0\1\u03c3\22\0\1\u03c3\50\0\1\u03c4\22\0"+
    "\1\u03c4\41\0\1\u03c5\61\0\1\u03c6\73\0\1\u03c7\135\0"+
    "\1\u037b\7\0\1\u03c8\17\0\1\u03c9\75\0\1\u03ca\136\0"+
    "\1\u03cb\61\0\1\u03cc\73\0\1\u03cd\113\0\1\u03ce\22\0"+
    "\1\u03cf\73\0\1\u03d0\76\0\1\u03d1\110\0\1\u03d2\116\0"+
    "\1\u03d3\47\0\1\u03d4\12\0\1\u03d4\72\0\1\u03d5\110\0"+
    "\1\u03d6\30\0\1\u03d7\105\0\1\u03d8\61\0\1\u03d9\135\0"+
    "\1\u03da\26\0\1\u03db\135\0\1\u0391\7\0\1\u03dc\33\0"+
    "\1\u03dd\124\0\1\u03de\30\0\1\u03df\126\0\1\u03e0\71\0"+
    "\1\u03e1\42\0\1\u03e2\143\0\1\u03e3\56\0\1\u03e4\40\0"+
    "\1\u03e5\110\0\1\u03e6\56\0\1\u03e7\126\0\1\u03e8\73\0"+
    "\1\u03e9\46\0\1\u03ea\137\0\1\u03eb\20\0\1\u03ec\10\0"+
    "\1\u03ec\2\0\1\u03ec\60\0\1\u03ed\140\0\1\u03ee\21\0"+
    "\1\u03ac\2\0\11\u03ac\1\u03ef\1\u03ac\1\u03ef\55\u03ac\10\0"+
    "\1\u03f0\111\0\1\u03f1\22\0\1\u03f1\44\0\1\u03f2\111\0"+
    "\1\u03f3\40\0\1\u03f4\73\0\1\u03f5\142\0\1\u03f6\76\0"+
    "\1\u03f7\70\0\1\u03f8\57\0\1\u03f9\43\0\1\u03fa\70\0"+
    "\1\u03fb\142\0\1\u03fc\43\0\1\u03fd\12\0\1\u03fd\40\0"+
    "\1\u03fe\10\0\1\u03fe\2\0\1\u03fe\77\0\1\u03ff\12\0"+
    "\1\u03ff\107\0\1\u0400\60\0\1\u0401\37\0\1\u0402\10\0"+
    "\1\u0402\2\0\1\u0402\127\0\1\u0403\55\0\1\u0404\42\0"+
    "\1\u0405\73\0\1\u0406\126\0\1\u0407\55\0\1\u0408\73\0"+
    "\1\u0409\70\0\1\u040a\112\0\1\u040b\110\0\1\u040c\75\0"+
    "\1\u040d\71\0\1\u040e\42\0\1\u040f\125\0\1\u0410\71\0"+
    "\1\u0411\26\0\1\u0412\140\0\1\u0413\51\0\1\u0414\101\0"+
    "\1\u0415\54\0\1\u0416\124\0\1\u0417\23\0\1\u03ac\1\u01e4"+
    "\1\u01e5\11\u03ac\1\u03ef\1\u03ac\1\u03ef\55\u03ac\57\0\1\u0418"+
    "\21\0\1\u0419\136\0\1\u041a\30\0\1\u041b\114\0\1\u041c"+
    "\22\0\1\u041c\103\0\1\u041d\36\0\1\u041e\12\0\1\u041e"+
    "\74\0\1\u041f\52\0\1\u0420\102\0\1\u0421\22\0\1\u0421"+
    "\60\0\1\u0422\40\0\1\u0423\75\0\1\u0424\145\0\1\u0425"+
    "\52\0\1\u0426\73\0\1\u0427\107\0\1\u0428\61\0\1\u0429"+
    "\57\0\1\u042a\12\0\1\u042a\104\0\1\u042b\77\0\1\u042c"+
    "\67\0\1\u042d\30\0\1\u042e\112\0\1\u042f\12\0\1\u042f"+
    "\104\0\1\u0430\76\0\1\u0431\25\0\1\u0432\145\0\1\u0433"+
    "\24\0\1\u0434\111\0\1\u0435\22\0\1\u0435\62\0\1\u0436"+
    "\37\0\1\u0437\10\0\1\u0437\2\0\1\u0437\63\0\1\u0438"+
    "\105\0\1\u0439\56\0\1\u043a\126\0\1\u043b\40\0\1\u043c"+
    "\73\0\1\u043d\114\0\1\u043e\22\0\1\u043e\27\0\1\u043f"+
    "\114\0\1\u0440\22\0\1\u0440\44\0\1\u0441\75\0\1\u0442"+
    "\12\0\1\u0442\113\0\1\u0443\21\0\1\u0444\112\0\1\u0445"+
    "\12\0\1\u0445\65\0\1\u0446\111\0\1\u0447\7\0\1\u0448"+
    "\27\0\1\u0449\132\0\1\u044a\40\0\1\u044b\57\0\1\u044c"+
    "\140\0\1\u044d\63\0\1\u044e\37\0\1\u044f\10\0\1\u044f"+
    "\2\0\1\u044f\60\0\1\u0450\71\0\1\u0451\74\0\1\u0452"+
    "\10\0\1\u0452\2\0\1\u0452\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[52380];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\1\1\1\11\3\1\2\11\3\1\2\11"+
    "\10\1\2\11\2\1\3\11\12\1\2\11\2\1\1\11"+
    "\20\1\1\11\3\1\2\11\2\1\1\11\2\1\1\11"+
    "\7\0\1\1\36\0\2\11\1\1\14\0\1\1\5\0"+
    "\1\11\37\0\2\11\4\0\5\11\3\0\3\11\5\0"+
    "\1\1\1\0\4\11\4\0\1\1\17\0\1\11\26\0"+
    "\1\11\6\0\1\1\2\0\1\11\72\0\1\1\14\0"+
    "\1\11\22\0\1\1\1\0\1\1\1\0\1\11\11\0"+
    "\1\11\12\0\1\11\3\0\1\1\1\0\1\1\1\11"+
    "\7\0\1\11\2\0\1\11\1\0\1\11\2\0\2\11"+
    "\1\0\1\11\2\0\3\11\1\0\1\11\2\0\1\11"+
    "\1\1\2\0\2\11\30\0\1\1\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\4\0\1\1\1\0\1\11\4\0"+
    "\3\11\3\0\1\11\7\0\2\11\3\0\1\11\2\0"+
    "\1\1\1\0\1\11\4\0\1\1\1\11\3\0\1\11"+
    "\1\0\1\11\6\0\2\11\10\0\2\1\4\0\1\11"+
    "\6\0\1\11\3\0\4\1\1\0\1\1\1\11\1\0"+
    "\1\1\3\0\1\11\1\0\1\11\13\0\1\11\16\0"+
    "\2\11\4\0\1\11\1\0\1\1\20\0\1\11\14\0"+
    "\3\11\3\0\2\11\1\0\1\11\12\0\1\11\6\0"+
    "\1\11\11\0\1\11\16\0\2\11\1\0\2\11\2\0"+
    "\1\11\4\0\1\11\6\0\3\11\1\1\2\11\1\0"+
    "\1\11\21\0\1\11\5\0\1\11\1\0\1\1\4\0"+
    "\2\11\2\0\1\11\6\0\1\1\7\0\1\11\1\0"+
    "\1\11\4\0\2\11\1\0\2\11\1\1\1\0\1\1"+
    "\15\0\1\11\5\0\1\11\2\0\1\11\2\0\1\11"+
    "\15\0\1\11\3\0\1\11\1\0\1\1\2\11\1\0"+
    "\4\11\1\0\1\11\1\0\1\11\4\0\1\11\6\0"+
    "\1\11\12\0\1\11\4\0\1\11\1\0\1\11\2\0"+
    "\1\11\10\0\4\11\1\0\1\1\3\0\1\11\6\0"+
    "\2\11\2\0\1\11\2\0\1\11\1\0\1\11\3\0"+
    "\1\11\2\0\1\11\5\0\2\11\1\1\6\0\1\1"+
    "\7\0\1\11\1\1\12\0\1\11\6\0\2\11\1\1"+
    "\5\0\4\11\3\0\1\11\6\0\1\11\1\0\1\11"+
    "\2\0\1\11\4\0\1\11\5\0\2\11\2\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\11\3\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\0\2\11\4\0\4\11\3\0\1\11\1\1\2\11"+
    "\5\0\1\11\2\0\5\11\2\0\1\1\3\0\2\1"+
    "\2\0\1\11\6\0\1\11\2\0\1\11\1\0\1\11"+
    "\2\0\1\11\2\0\2\11\1\0\3\11\3\0\2\11"+
    "\2\0\2\11\2\0\1\11\3\0\2\11\3\0\2\11"+
    "\2\0\1\11\1\1\1\0\2\11\1\0\2\11\2\0"+
    "\1\1\2\0\2\11\1\0\1\1\1\0\1\11\1\0"+
    "\1\11\3\0\2\1\1\11\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1106];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private IToken prevToken = null;

    private FixedFormLexerPrepass prepass;

    public FixedFormLexerPhase1(Reader in, FixedFormLexerPrepass _prepass) {
        this(new LineAppendingReader(in));
        this.prepass=_prepass;
    }

    //unset start of line state
    private void unsetSOL() {
        if (yystate()==YYINITIAL) yybegin(YYSTANDARD);
    }
    
    // JO
    // IMPORTANT: If this is called on a new type of statement,
    //            PreLexerLine#hollerithsOK() in FixedFormLexerPrepass
    //            must also be modified to recognize the statement.
    //            This ensures that spaces will be removed from the
    //            text it would otherwise treat as a Hollerith.  (This
    //            can lead to errors like "extraneous character: (space)"
    //            and "Hollerith spans multiple lines without continuation")
    private void disallowHolleriths() {
        if (yystate()==YYSTANDARD) yybegin(YYSTANDARD_NOHOLLERITH);
    }

    public int getLine() {
        return prepass.getLine(yychar);
    }

    public int getCol() {
        return prepass.getColumn(yychar);
    }

    protected FileOrIFile lastTokenFile = null;
    protected int lastTokenLine = 1, lastTokenCol = 1, lastTokenFileOffset = 0, lastTokenStreamOffset = 0, lastTokenLength = 0;

    private static final Pattern eol = Pattern.compile("(\\r|\\n)+");

    protected boolean isEOL(String string)
    {
        return eol.matcher(string).matches();
    }

    private IToken token(Terminal terminal)
    {
        //For some there are 2 terminals of type Terminal.END_OF_INPUT that get here in a row
        // so, technically, the function below sets the whitespaceAfter on the first one it sees,
        // which is not really the expected behavior, but that token's whitespace is not used for
        // anything anyway, so this should be OK
        if(prevToken != null && terminal == Terminal.END_OF_INPUT)
        {
            //We need to manually set this, because the input string to the lexer does not
            // have any whitespace, or at the very list has it trimmed, so we are loosing all
            // of the trailing whitespace on any refactoring. That is why we assign it as
            // whitespaceAfter to the last END_OF_STATEMENT token before END_OF_INPUT
            String whiteAfter = prepass.getTrailingWhitespace();
            prevToken.setWhiteAfter(whiteAfter);
        }

        lastTokenLine = prepass.getLine(yychar)+1;
        lastTokenCol = prepass.getColumn(yychar)+1;
        lastTokenFileOffset = prepass.getOffset(yychar);
        lastTokenStreamOffset = prepass.getOffset(yychar);
        lastTokenLength = prepass.getOffset(yychar+yylength()-1)-prepass.getOffset(yychar)+1;

        //For some reason the author of above code needed to add 1 to the line/col values
        // for my code, I actually need the original value of token positions, so
        // I added those variables for that
        int tokLine = lastTokenLine-1;
        int tokCol = lastTokenCol-1;
        int tokOff = lastTokenFileOffset;

        String tokenText = "";
        //If it is the end of statement, use text from original string to get the line separator.
        // For some reason the text returned by yytext() in this case is always '/n', while the
        // actual separator is '/r/n'
        if(terminal == Terminal.T_EOS)
        {
            tokenText = yytext();
            if (isEOL(tokenText))
                tokenText = prepass.getFileEOL();
        }
        //If it is the end of input, use the Lexer's text.
        else if(terminal == Terminal.END_OF_INPUT)
        {
            tokenText = yytext();
        }
        //If it is a quote, use text accumulated in the buffer string
        else if(terminal == Terminal.T_SCON || terminal == Terminal.T_HCON)
        {
            tokenText = stringBuffer.toString();
            //lastTokenColumn and lastTokenOffset of quoted strings actually IS the position of the last character
            // of that string (for some reason w/o the final quote). So, in order to correctly map it to the whitespace
            // before it, we need to shift the column and offset we are using by 1 less than the length of the string
            tokCol = tokCol - (tokenText.length() - 1);
            tokOff = tokOff - (tokenText.length() - 1);
        }
        //Otherwise, use the text directly from file (that way all the whitespace is preserved in the
        // tokens text)
        else
            tokenText = prepass.getTokenText(lastTokenFileOffset, lastTokenLength);

        prevToken = new Token(terminal,
                              prepass.getWhitespaceBefore(tokLine, tokCol, tokOff),
                              tokenText,
                              "");

        if(!tokenText.equals(yytext()) && terminal != Terminal.T_EOS)
        {
            prevToken.setPreprocessorDirective(new FixedFormReplacement(tokenText));
            prevToken.setText(yytext());
        }

        return prevToken;
    }

    /*
    private IToken token(Terminal terminal)
    {
        IToken t = new Token();
        t.setTerminal(terminal);
        t.setFilename(this.filename);
        t.setFileOffset(prepass.getOffset(yychar));
        t.setStreamOffset(prepass.getOffset(yychar));
        t.setLength(prepass.getOffset(yychar+yylength()-1)-prepass.getOffset(yychar)+1);
        t.setText(terminal == Terminal.T_SCON || terminal == Terminal.T_HCON
                  ? stringBuffer.toString()
                  : yytext());
        t.setStartLine(prepass.getLine(yychar)+1);
        t.setStartCol(prepass.getColumn(yychar)+1);
        t.setEndLine(prepass.getLine(yychar+yylength()-1)+1);
        t.setEndCol(prepass.getColumn(yychar+yylength()-1)+1);

        return t;
    }
    */

    private StringBuffer stringBuffer = null;
    private int hollerithLength = 0;

    private boolean wantEos = false;

    private String filename = "<stdin>";

    public FixedFormLexerPhase1(Reader in, FixedFormLexerPrepass _prepass, IFile file, String filename)
    {
        this(in, _prepass);
        this.lastTokenFile = new FileOrIFile(file);
        this.filename = filename;
    }

    public String getFilename()
    {
        return filename;
    }

    public int getLastTokenLine()
    {
        return lastTokenLine;
    }

    public int getLastTokenCol()
    {
        return lastTokenCol;
    }

    public FileOrIFile getLastTokenFile()
    {
        return lastTokenFile;
    }

    public int getLastTokenFileOffset()
    {
        return lastTokenFileOffset;
    }

    public int getLastTokenStreamOffset()
    {
        return lastTokenStreamOffset;
    }

    public int getLastTokenLength()
    {
        return lastTokenLength;
    }

    public void setTokenAsCurrent(IToken token)
    {
        //lastTokenFile = token.getFile();
        lastTokenLine = token.getLine();
        lastTokenCol = token.getCol();
        lastTokenFile = token.getPhysicalFile();
        lastTokenFileOffset = token.getFileOffset();
        lastTokenStreamOffset = token.getStreamOffset();
        lastTokenLength = token.getLength();
    }

//    private List/*<NonTreeToken>*/ nonTreeTokens = new LinkedList();
//    public List/*<NonTreeToken>*/ getNonTreeTokens()
//    {
//      return nonTreeTokens;
//    }
//
      private void storeNonTreeToken()
      {
//        nonTreeTokens.add(new NonTreeToken(this.filename,
//                          prepass.getOffset(yychar),   // int offset
//                          prepass.getLine(yychar)+1,   // int row
//                          prepass.getColumn(yychar)+1, // int col
//                          yytext()));
      }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  FixedFormLexerPhase1(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  FixedFormLexerPhase1(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IToken yylex() throws java.io.IOException, LexerException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { yypushback(1);
                                                        int state=yystate();
                                                        yybegin(IDENT);
                                                        IToken token = yylex();
                                                        yybegin(state);
                                                        return token;
          }
        case 261: break;
        case 2: 
          { yybegin(YYINITIAL); boolean b = wantEos; wantEos = false; if (b) return token(Terminal.T_EOS); else storeNonTreeToken();
          }
        case 262: break;
        case 3: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_ASTERISK);
          }
        case 263: break;
        case 4: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ICON);
          }
        case 264: break;
        case 5: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_PLUS);
          }
        case 265: break;
        case 6: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_MINUS);
          }
        case 266: break;
        case 7: 
          { stringBuffer = new StringBuffer();
                                                  stringBuffer.append('\'');
                                                  yybegin(QUOTED);
          }
        case 267: break;
        case 8: 
          { stringBuffer = new StringBuffer();
                                                  stringBuffer.append('\"');
                                                  yybegin(DBLQUOTED);
          }
        case 268: break;
        case 9: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNDERSCORE);
          }
        case 269: break;
        case 10: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_COLON);
          }
        case 270: break;
        case 11: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LPAREN);
          }
        case 271: break;
        case 12: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_COMMA);
          }
        case 272: break;
        case 13: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_RPAREN);
          }
        case 273: break;
        case 14: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQUALS);
          }
        case 274: break;
        case 15: 
          { wantEos = true;                     return token(Terminal.T_LBRACKET);
          }
        case 275: break;
        case 16: 
          { wantEos = true;                     return token(Terminal.T_RBRACKET);
          }
        case 276: break;
        case 17: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GREATERTHAN);
          }
        case 277: break;
        case 18: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LESSTHAN);
          }
        case 278: break;
        case 19: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PERCENT);
          }
        case 279: break;
        case 20: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASH);
          }
        case 280: break;
        case 21: 
          { stringBuffer.append( yytext() );
          }
        case 281: break;
        case 22: 
          { throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): String literal spans multiple lines without continuation");
          }
        case 282: break;
        case 23: 
          { stringBuffer.append("'");
                                                  yybegin(YYSTANDARD);
                                                  wantEos = true;
                                                  return token(Terminal.T_SCON);
          }
        case 283: break;
        case 24: 
          { stringBuffer.append('\"');
                                                  yybegin(YYSTANDARD);
                                                  wantEos = true;
                                                  return token(Terminal.T_SCON);
          }
        case 284: break;
        case 25: 
          { hollerithLength--;
                                                    stringBuffer.append(yytext());
                                                    if (hollerithLength==0) {
                                                            yybegin(YYSTANDARD);
                                                            wantEos = true;
                                                            return token(Terminal.T_HCON);
                                                     }
          }
        case 285: break;
        case 26: 
          { throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): Hollerith literal spans multiple lines without continuation");
          }
        case 286: break;
        case 27: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_UNEXPECTED_CHARACTER);
          }
        case 287: break;
        case 28: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IDENT);
          }
        case 288: break;
        case 29: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_POW);
          }
        case 289: break;
        case 30: 
          { wantEos = true; yybegin(YYSTANDARD); disallowHolleriths(); return token(Terminal.T_DO);
          }
        case 290: break;
        case 31: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IF);
          }
        case 291: break;
        case 32: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IS);
          }
        case 292: break;
        case 33: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IN);
          }
        case 293: break;
        case 34: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_GO);
          }
        case 294: break;
        case 35: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_TO);
          }
        case 295: break;
        case 36: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQEQ);
          }
        case 296: break;
        case 37: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQGREATERTHAN);
          }
        case 297: break;
        case 38: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GREATERTHANEQ);
          }
        case 298: break;
        case 39: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LESSTHANEQ);
          }
        case 299: break;
        case 40: 
          { wantEos = true;                      return token(Terminal.T_NE);
          }
        case 300: break;
        case 41: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASHEQ);
          }
        case 301: break;
        case 42: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_SLASHSLASH);
          }
        case 302: break;
        case 43: 
          { stringBuffer = new StringBuffer();
                                                  String text = yytext();
                                                  stringBuffer.append(text);
                                                  hollerithLength=Integer.parseInt(text.substring(0,text.length()-1));
                                                  if (hollerithLength==0)
                                                      throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): Invalid length of hollerith literal: 0");
                                                  yybegin(HOLLERITH);
          }
        case 303: break;
        case 44: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PCON);
          }
        case 304: break;
        case 45: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_XCON);
          }
        case 305: break;
        case 46: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RCON);
          }
        case 306: break;
        case 47: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_LPARENSLASH);
          }
        case 307: break;
        case 48: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SLASHRPAREN);
          }
        case 308: break;
        case 49: 
          { stringBuffer.append("''");
          }
        case 309: break;
        case 50: 
          { stringBuffer.append("\"\"");
          }
        case 310: break;
        case 51: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_END);
          }
        case 311: break;
        case 52: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_XDOP);
          }
        case 312: break;
        case 53: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OUT);
          }
        case 313: break;
        case 54: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALL);
          }
        case 314: break;
        case 55: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IDEQ);
          }
        case 315: break;
        case 56: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_LEN);
          }
        case 316: break;
        case 57: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_USE);
          }
        case 317: break;
        case 58: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DCON);
          }
        case 318: break;
        case 59: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RCON);
          }
        case 319: break;
        case 60: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXIT);
          }
        case 320: break;
        case 61: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDEQ);
          }
        case 321: break;
        case 62: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ENUM);
          }
        case 322: break;
        case 63: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSE);
          }
        case 323: break;
        case 64: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ERREQ);
          }
        case 324: break;
        case 65: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DATA);
          }
        case 325: break;
        case 66: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQ);
          }
        case 326: break;
        case 67: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_OR);
          }
        case 327: break;
        case 68: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GE);
          }
        case 328: break;
        case 69: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_GT);
          }
        case 329: break;
        case 70: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NE);
          }
        case 330: break;
        case 71: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LE);
          }
        case 331: break;
        case 72: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LT);
          }
        case 332: break;
        case 73: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_BCON);
          }
        case 333: break;
        case 74: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_BIND);
          }
        case 334: break;
        case 75: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_OCON);
          }
        case 335: break;
        case 76: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPEN);
          }
        case 336: break;
        case 77: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ONLY);
          }
        case 337: break;
        case 78: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_ZCON);
          }
        case 338: break;
        case 79: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FILE);
          }
        case 339: break;
        case 80: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FMTEQ);
          }
        case 340: break;
        case 81: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SAVE);
          }
        case 341: break;
        case 82: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STOP);
          }
        case 342: break;
        case 83: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SYNC);
          }
        case 343: break;
        case 84: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_GOTO);
          }
        case 344: break;
        case 85: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_POSEQ);
          }
        case 345: break;
        case 86: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PADEQ);
          }
        case 346: break;
        case 87: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_PASS);
          }
        case 347: break;
        case 88: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PURE);
          }
        case 348: break;
        case 89: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_THEN);
          }
        case 349: break;
        case 90: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_TYPE);
          }
        case 350: break;
        case 91: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NONE);
          }
        case 351: break;
        case 92: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NULL);
          }
        case 352: break;
        case 93: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NMLEQ);
          }
        case 353: break;
        case 94: 
          { storeNonTreeToken();
          }
        case 354: break;
        case 95: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_LENEQ);
          }
        case 355: break;
        case 96: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_LOCK);
          }
        case 356: break;
        case 97: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CASE);
          }
        case 357: break;
        case 98: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CALL);
          }
        case 358: break;
        case 99: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READ);
          }
        case 359: break;
        case 100: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_REAL);
          }
        case 360: break;
        case 101: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECEQ);
          }
        case 361: break;
        case 102: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_WAIT);
          }
        case 362: break;
        case 103: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_KIND);
          }
        case 363: break;
        case 104: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FCON);
          }
        case 364: break;
        case 105: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { wantEos = true;                     return token(Terminal.T_X_IMPL);
          }
        case 365: break;
        case 106: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDDO);
          }
        case 366: break;
        case 107: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDIF);
          }
        case 367: break;
        case 108: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENTRY);
          }
        case 368: break;
        case 109: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_EQV);
          }
        case 369: break;
        case 110: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_AND);
          }
        case 370: break;
        case 111: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NOT);
          }
        case 371: break;
        case 112: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLOCK);
          }
        case 372: break;
        case 113: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INOUT);
          }
        case 373: break;
        case 114: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORMEQ);
          }
        case 374: break;
        case 115: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_FINAL);
          }
        case 375: break;
        case 116: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FILEEQ);
          }
        case 376: break;
        case 117: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SIZEEQ);
          }
        case 377: break;
        case 118: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_SIGNEQ);
          }
        case 378: break;
        case 119: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STATEQ);
          }
        case 379: break;
        case 120: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PAUSE);
          }
        case 380: break;
        case 121: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PRINT);
          }
        case 381: break;
        case 122: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMEEQ);
          }
        case 382: break;
        case 123: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CLOSE);
          }
        case 383: break;
        case 124: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_CLASS);
          }
        case 384: break;
        case 125: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CYCLE);
          }
        case 385: break;
        case 126: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNITEQ);
          }
        case 386: break;
        case 127: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READEQ);
          }
        case 387: break;
        case 128: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECLEQ);
          }
        case 388: break;
        case 129: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_VALUE);
          }
        case 389: break;
        case 130: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WHERE);
          }
        case 390: break;
        case 131: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WHILE);
          }
        case 391: break;
        case 132: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WRITE);
          }
        case 392: break;
        case 133: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_KINDEQ);
          }
        case 393: break;
        case 134: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { wantEos = true;                     return token(Terminal.T_X_IMPL);
          }
        case 394: break;
        case 135: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXISTEQ);
          }
        case 395: break;
        case 136: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSEIF);
          }
        case 396: break;
        case 137: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DELIMEQ);
          }
        case 397: break;
        case 138: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_DOUBLE);
          }
        case 398: break;
        case 139: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_TRUE);
          }
        case 399: break;
        case 140: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_NEQV);
          }
        case 400: break;
        case 141: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLANKEQ);
          }
        case 401: break;
        case 142: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ASSIGN);
          }
        case 402: break;
        case 143: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IOMSGEQ);
          }
        case 403: break;
        case 144: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTENT);
          }
        case 404: break;
        case 145: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IMAGES);
          }
        case 405: break;
        case 146: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_IMPORT);
          }
        case 406: break;
        case 147: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IMPURE);
          }
        case 407: break;
        case 148: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORALL);
          }
        case 408: break;
        case 149: 
          { wantEos = true; yybegin(OPERATORorFORMAT); return token(Terminal.T_FORMAT);
          }
        case 409: break;
        case 150: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SELECT);
          }
        case 410: break;
        case 151: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PUBLIC);
          }
        case 411: break;
        case 152: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_TARGET);
          }
        case 412: break;
        case 153: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_NOPASS);
          }
        case 413: break;
        case 154: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMEDEQ);
          }
        case 414: break;
        case 155: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_COMMON);
          }
        case 415: break;
        case 156: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNLOCK);
          }
        case 416: break;
        case 157: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RESULT);
          }
        case 417: break;
        case 158: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RETURN);
          }
        case 418: break;
        case 159: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_REWIND);
          }
        case 419: break;
        case 160: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ROUNDEQ);
          }
        case 420: break;
        case 161: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_MEMORY);
          }
        case 421: break;
        case 162: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_MODULE);
          }
        case 422: break;
        case 163: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_WRITEEQ);
          }
        case 423: break;
        case 164: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_EXTENDS);
          }
        case 424: break;
        case 165: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFILE);
          }
        case 425: break;
        case 166: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDTYPE);
          }
        case 426: break;
        case 167: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DEFAULT);
          }
        case 427: break;
        case 168: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DIRECTEQ);
          }
        case 428: break;
        case 169: 
          { wantEos = true; unsetSOL();          return token(Terminal.T_FALSE);
          }
        case 429: break;
        case 170: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPENEDEQ);
          }
        case 430: break;
        case 171: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALLSTOP);
          }
        case 431: break;
        case 172: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ACTIONEQ);
          }
        case 432: break;
        case 173: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ACCESSEQ);
          }
        case 433: break;
        case 174: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IOSTATEQ);
          }
        case 434: break;
        case 175: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_INTEGER);
          }
        case 435: break;
        case 176: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INQUIRE);
          }
        case 436: break;
        case 177: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_STATUSEQ);
          }
        case 437: break;
        case 178: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_STREAMEQ);
          }
        case 438: break;
        case 179: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SYNCALL);
          }
        case 439: break;
        case 180: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_GENERIC);
          }
        case 440: break;
        case 181: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_POINTER);
          }
        case 441: break;
        case 182: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PROGRAM);
          }
        case 442: break;
        case 183: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PRIVATE);
          }
        case 443: break;
        case 184: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NULLIFY);
          }
        case 444: break;
        case 185: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NUMBEREQ);
          }
        case 445: break;
        case 186: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_LOGICAL);
          }
        case 446: break;
        case 187: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_COMPLEX);
          }
        case 447: break;
        case 188: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EXTERNAL);
          }
        case 448: break;
        case 189: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDBLOCK);
          }
        case 449: break;
        case 190: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDWHERE);
          }
        case 450: break;
        case 191: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_DEFERRED);
          }
        case 451: break;
        case 192: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_DECIMALEQ);
          }
        case 452: break;
        case 193: 
          { wantEos = true; yybegin(OPERATORorFORMAT);  return token(Terminal.T_OPERATOR);
          }
        case 453: break;
        case 194: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_OPTIONAL);
          }
        case 454: break;
        case 195: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ADVANCEEQ);
          }
        case 455: break;
        case 196: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ABSTRACT);
          }
        case 456: break;
        case 197: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALLOCATE);
          }
        case 457: break;
        case 198: 
          { wantEos = true; yybegin(IMPLICIT);   return token(Terminal.T_IMPLICIT);
          }
        case 458: break;
        case 199: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FUNCTION);
          }
        case 459: break;
        case 200: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SEQUENCE);
          }
        case 460: break;
        case 201: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_PENDINGEQ);
          }
        case 461: break;
        case 202: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NEXTRECEQ);
          }
        case 462: break;
        case 203: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NEWUNITEQ);
          }
        case 463: break;
        case 204: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_NAMELIST);
          }
        case 464: break;
        case 205: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONTAINS);
          }
        case 465: break;
        case 206: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONTINUE);
          }
        case 466: break;
        case 207: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_CONVERTEQ);
          }
        case 467: break;
        case 208: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CRITICAL);
          }
        case 468: break;
        case 209: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_VOLATILE);
          }
        case 469: break;
        case 210: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFORALL);
          }
        case 470: break;
        case 211: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDSELECT);
          }
        case 471: break;
        case 212: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDMODULE);
          }
        case 472: break;
        case 213: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ENCODINGEQ);
          }
        case 473: break;
        case 214: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELEMENTAL);
          }
        case 474: break;
        case 215: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ELSEWHERE);
          }
        case 475: break;
        case 216: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DIMENSION);
          }
        case 476: break;
        case 217: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BACKSPACE);
          }
        case 477: break;
        case 218: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_BLOCKDATA);
          }
        case 478: break;
        case 219: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ASSOCIATE);
          }
        case 479: break;
        case 220: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_IOLENGTHEQ);
          }
        case 480: break;
        case 221: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTERFACE);
          }
        case 481: break;
        case 222: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_INTRINSIC);
          }
        case 482: break;
        case 223: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SUBMODULE);
          }
        case 483: break;
        case 224: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_POSITIONEQ);
          }
        case 484: break;
        case 225: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PARAMETER);
          }
        case 485: break;
        case 226: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_PRECISION);
          }
        case 486: break;
        case 227: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_PROTECTED);
          }
        case 487: break;
        case 228: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_PROCEDURE);
          }
        case 488: break;
        case 229: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_CHARACTER);
          }
        case 489: break;
        case 230: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_RECURSIVE);
          }
        case 490: break;
        case 231: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDPROGRAM);
          }
        case 491: break;
        case 232: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ENUMERATOR);
          }
        case 492: break;
        case 233: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_DEALLOCATE);
          }
        case 493: break;
        case 234: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ASSIGNMENT);
          }
        case 494: break;
        case 235: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_FORMATTEDEQ);
          }
        case 495: break;
        case 236: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SELECTCASE);
          }
        case 496: break;
        case 237: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SUBROUTINE);
          }
        case 497: break;
        case 238: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SYNCIMAGES);
          }
        case 498: break;
        case 239: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SYNCMEMORY);
          }
        case 499: break;
        case 240: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONTIGUOUS);
          }
        case 500: break;
        case 241: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CONCURRENT);
          }
        case 501: break;
        case 242: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_READWRITEEQ);
          }
        case 502: break;
        case 243: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDFUNCTION);
          }
        case 503: break;
        case 244: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDCRITICAL);
          }
        case 504: break;
        case 245: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_EQUIVALENCE);
          }
        case 505: break;
        case 246: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ALLOCATABLE);
          }
        case 506: break;
        case 247: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_SEQUENTIALEQ);
          }
        case 507: break;
        case 248: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_CODIMENSION);
          }
        case 508: break;
        case 249: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDBLOCKDATA);
          }
        case 509: break;
        case 250: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDINTERFACE);
          }
        case 510: break;
        case 251: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDSUBMODULE);
          }
        case 511: break;
        case 252: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDPROCEDURE);
          }
        case 512: break;
        case 253: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ASYNCHRONOUS);
          }
        case 513: break;
        case 254: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_UNFORMATTEDEQ);
          }
        case 514: break;
        case 255: 
          { wantEos = true; yybegin(YYSTANDARD); return token(Terminal.T_ENDSUBROUTINE);
          }
        case 515: break;
        case 256: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_DOUBLECOMPLEX);
          }
        case 516: break;
        case 257: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_ASYNCHRONOUSEQ);
          }
        case 517: break;
        case 258: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_NON_INTRINSIC);
          }
        case 518: break;
        case 259: 
          { wantEos = true; unsetSOL();          disallowHolleriths(); return token(Terminal.T_DOUBLEPRECISION);
          }
        case 519: break;
        case 260: 
          { wantEos = true; yybegin(YYINITIAL); return token(Terminal.T_NON_OVERRIDABLE);
          }
        case 520: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 1107: break;
            case IMPLICIT: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 1108: break;
            case QUOTED: {
              throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before string literal terminated");
            }
            case 1109: break;
            case DBLQUOTED: {
              throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before string literal terminated");
            }
            case 1110: break;
            case HOLLERITH: {
              throw new LexerException(this, "Lexer Error (line " + (getLine()+1) + ", col " + (getCol()+1) + "): End of file encountered before hollerith literal terminated");
            }
            case 1111: break;
            case YYSTANDARD: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 1112: break;
            case YYSTANDARD_NOHOLLERITH: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 1113: break;
            case OPERATORorFORMAT: {
              wantEos = false; yybegin(YYSTANDARD); return token(Terminal.END_OF_INPUT);
            }
            case 1114: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
